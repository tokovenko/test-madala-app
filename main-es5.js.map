{"version":3,"sources":["$_lazy_route_resource lazy namespace object","src/app/app.component.html","src/app/modules/mandala/components/mandala-editor/mandala-editor-canvas/mandala-editor-canvas.component.html","src/app/modules/mandala/components/mandala-editor/mandala-editor-colorpicker/mandala-editor-colorpicker.component.html","src/app/modules/mandala/components/mandala-editor/mandala-editor-export-svg/mandala-editor-export-svg.component.html","src/app/modules/mandala/components/mandala-editor/mandala-editor-tools/mandala-editor-tools.component.html","src/app/modules/mandala/components/mandala-editor/mandala-editor.component.html","node_modules/tslib/tslib.es6.js","src/app/app-routing.module.ts","src/app/app.component.scss","src/app/app.component.ts","src/app/app.module.ts","src/app/modules/common/common.module.ts","src/app/modules/common/services/layout.service.ts","src/app/modules/common/services/store.service.ts","src/app/modules/common/store/actions/layout.actions.ts","src/app/modules/common/store/reducers/layout.ts","src/app/modules/common/store/selectors/layout.selectors.ts","src/app/modules/mandala/components/mandala-editor/mandala-editor-canvas/mandala-editor-canvas.component.scss","src/app/modules/mandala/components/mandala-editor/mandala-editor-canvas/mandala-editor-canvas.component.ts","src/app/modules/mandala/components/mandala-editor/mandala-editor-colorpicker/mandala-editor-colorpicker.component.scss","src/app/modules/mandala/components/mandala-editor/mandala-editor-colorpicker/mandala-editor-colorpicker.component.ts","src/app/modules/mandala/components/mandala-editor/mandala-editor-export-svg/mandala-editor-export-svg.component.scss","src/app/modules/mandala/components/mandala-editor/mandala-editor-export-svg/mandala-editor-export-svg.component.ts","src/app/modules/mandala/components/mandala-editor/mandala-editor-tools/mandala-editor-tools.component.scss","src/app/modules/mandala/components/mandala-editor/mandala-editor-tools/mandala-editor-tools.component.ts","src/app/modules/mandala/components/mandala-editor/mandala-editor.component.scss","src/app/modules/mandala/components/mandala-editor/mandala-editor.component.ts","src/app/modules/mandala/directives/mandala-draw-zones.directive.ts","src/app/modules/mandala/enums/smooth-types.ts","src/app/modules/mandala/enums/tools.ts","src/app/modules/mandala/helpers/magic-wand.js","src/app/modules/mandala/mandala.module.ts","src/app/modules/mandala/services/canvas.service.ts","src/app/modules/mandala/services/editor.service.ts","src/app/modules/mandala/services/idb.service.ts","src/app/modules/mandala/services/tool.service.ts","src/app/modules/mandala/services/undo/undo-stack-item.ts","src/app/modules/mandala/services/undo/undo.service.ts","src/app/modules/mandala/store/actions/editor.actions.ts","src/app/modules/mandala/store/effects/editor.effects.ts","src/app/modules/mandala/store/reducers/editor.reducer.ts","src/app/modules/mandala/store/selectors/editor.selectors.ts","src/app/modules/mandala/tools/draw-free.ts","src/app/modules/mandala/tools/draw-image.ts","src/app/modules/mandala/tools/draw-line.ts","src/app/modules/mandala/tools/draw.base.ts","src/app/modules/mandala/tools/fill-background.ts","src/app/modules/mandala/tools/fill-bucket.ts","src/app/modules/mandala/tools/helpers/transformer.ts","src/app/modules/mandala/tools/pipette.ts","src/app/modules/mandala/tools/tap.base.ts","src/app/modules/mandala/tools/tool.base.ts","src/environments/environment.ts","src/main.ts","node/self.js (ignored)"],"names":[],"mappings":"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","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","export default \"<div class=\\\"container\\\">\\n    <div class=\\\"editor\\\">\\n        <app-mandala-editor [fullScreen]=\\\"true\\\"></app-mandala-editor>\\n    </div>\\n</div>\"","export default \"<div class=\\\"container\\\"\\n     [style.width]=\\\"width\\\"\\n     [style.height]=\\\"height\\\">\\n    <canvas id=\\\"canvas-draw\\\" #drawCanvas></canvas>\\n    <canvas id=\\\"canvas-fill\\\" #fillCanvas></canvas>\\n    <canvas id=\\\"canvas-zones\\\" appMandalaDrawZones #zonesCanvas></canvas>\\n</div>\"","export default \"<div class=\\\"colorpicker\\\">\\n    <div #picker id=\\\"color-picker-container\\\"></div>\\n</div>\"","export default \"<div #container class=\\\"svg-container\\\">\\n</div>\"","export default \"<div class=\\\"container\\\">\\n    <div class=\\\"undo-controls\\\">\\n        <button \\n            matTooltip=\\\"Undo\\\"\\n            [disabled]=\\\"!hasUndo\\\"\\n            mat-mini-fab\\n            (click)=\\\"undo()\\\">\\n            <mat-icon>undo</mat-icon>\\n        </button>\\n        <button \\n            matTooltip=\\\"Redo\\\"\\n            [disabled]=\\\"!hasRedo\\\"\\n            mat-mini-fab\\n            (click)=\\\"redo()\\\">\\n            <mat-icon>redo</mat-icon>\\n        </button>\\n    </div>\\n    <div class=\\\"tools\\\">\\n        <div class=\\\"tools__item tools__item--zones\\\">\\n            <button \\n                matTooltip=\\\"Decrease Zones\\\"\\n                mat-icon-button\\n                (click)=\\\"decreaseZones()\\\">\\n                <mat-icon>remove</mat-icon>\\n            </button>\\n            <span>{{zonesCount}}</span>\\n            <button \\n                matTooltip=\\\"Increase Zones\\\"\\n                mat-icon-button\\n                (click)=\\\"increaseZones()\\\">\\n                <mat-icon>add</mat-icon>\\n            </button>\\n        </div>\\n        <div class=\\\"tools__item\\\">\\n            <button \\n                matTooltip=\\\"Draw\\\"\\n                mat-fab \\n                [class.active]=\\\"isCurrentTool(TOOLS.DRAW_FREE)\\\"\\n                (click)=\\\"enableTool(TOOLS.DRAW_FREE)\\\">\\n                <mat-icon>gesture</mat-icon>\\n            </button>\\n        </div>\\n        <div class=\\\"tools__item\\\">\\n            <button \\n                matTooltip=\\\"Line\\\"\\n                mat-fab \\n                (click)=\\\"enableTool(TOOLS.DRAW_LINE)\\\"\\n                [class.active]=\\\"isCurrentTool(TOOLS.DRAW_LINE)\\\">\\n                <mat-icon>show_chart</mat-icon>\\n            </button>\\n        </div>\\n        <div class=\\\"tools__item\\\">\\n            <button \\n                matTooltip=\\\"Draw with image\\\"\\n                mat-fab \\n                [class.active]=\\\"isCurrentTool(TOOLS.DRAW_IMAGE)\\\"\\n                (click)=\\\"enableTool(TOOLS.DRAW_IMAGE)\\\">\\n                <mat-icon>collections</mat-icon>\\n            </button>\\n        </div>\\n        <div class=\\\"tools__item\\\">\\n            <button \\n                matTooltip=\\\"Background\\\"\\n                mat-fab \\n                (click)=\\\"enableTool(TOOLS.FILL_BACKGROUND)\\\"\\n                [class.active]=\\\"isCurrentTool(TOOLS.FILL_BACKGROUND)\\\">\\n                <mat-icon>opacity</mat-icon>\\n            </button>\\n        </div>\\n        <div class=\\\"tools__item\\\">\\n            <button \\n                matTooltip=\\\"Fill Bucket\\\"\\n                mat-fab \\n                (click)=\\\"enableTool(TOOLS.FILL_BUCKET)\\\"\\n                [class.active]=\\\"isCurrentTool(TOOLS.FILL_BUCKET)\\\">\\n                <mat-icon>filter_b_and_w</mat-icon>\\n            </button>\\n        </div>\\n        <div class=\\\"tools__item\\\">\\n            <button \\n                matTooltip=\\\"Pipette\\\"\\n                mat-fab \\n                (click)=\\\"enableTool(TOOLS.PIPETTE)\\\"\\n                [class.active]=\\\"isCurrentTool(TOOLS.PIPETTE)\\\">\\n                <mat-icon>colorize</mat-icon>\\n            </button>\\n        </div>\\n        <div class=\\\"tools__item\\\">\\n            <button \\n                matTooltip=\\\"Clear All\\\"\\n                mat-fab \\n                (click)=\\\"clear()\\\">\\n                <mat-icon> layers_clear</mat-icon>\\n            </button>\\n        </div>\\n        <div class=\\\"tools__item\\\">\\n            <button\\n                matTooltip=\\\"to SVG\\\"\\n                mat-fab \\n                (click)=\\\"toSVG()\\\">\\n                <mat-icon> cloud_download</mat-icon>\\n            </button>\\n        </div>\\n    </div>\\n    <div class=\\\"sub-tools\\\">\\n        <div\\n            *ngIf=\\\"!isCurrentTool(TOOLS.DRAW_IMAGE)\\\" \\n            class=\\\"sub-tools__item sub-tools__item--color\\\">\\n            <div class=\\\"color-preview\\\"\\n                 matTooltip=\\\"Change Color\\\"\\n                 [style.background-color]=\\\"color$ | async\\\"\\n                 (click)=\\\"toggleColorpicker()\\\"></div>\\n        </div>\\n        <div \\n            *ngIf=\\\"isDrawTool\\\"\\n            class=\\\"sub-tools__item\\\">\\n            <mat-checkbox \\n                matTooltip=\\\"Mirror Draw\\\"\\n                [(ngModel)]=\\\"isMirrorEnabled\\\">mirror</mat-checkbox>\\n        </div>\\n        <div *ngIf=\\\"isCurrentTool(TOOLS.DRAW_FREE)\\\"\\n             class=\\\"sub-tools__item sub-tools__item--smooth-type\\\">\\n            <mat-select [(value)]=\\\"smoothType\\\">\\n                <mat-option \\n                    *ngFor=\\\"let smoothType of smoothTypes\\\" \\n                    [value]=\\\"smoothType.type\\\">\\n                  {{smoothType.name}}\\n                </mat-option>\\n              </mat-select>\\n        </div>\\n        <div \\n            *ngIf=\\\"isDrawWithStrokeTool\\\"\\n            class=\\\"sub-tools__item sub-tools__item--stroke-width\\\">\\n            <mat-slider\\n                [min]=\\\"1\\\"\\n                [max]=\\\"30\\\"\\n                [step]=\\\"1\\\"\\n                [thumbLabel]=\\\"true\\\"\\n                [vertical]=\\\"true\\\"\\n                [(ngModel)]=\\\"strokeWidth\\\">\\n            </mat-slider>\\n        </div>\\n        <div \\n            *ngIf=\\\"isCurrentTool(TOOLS.DRAW_IMAGE)\\\"\\n            class=\\\"sub-tools__item sub-tools__item--images\\\">\\n            <div \\n                *ngFor=\\\"let image of drawImages\\\"\\n                [class.active]=\\\"isCurrentImageDraw(image.url)\\\"\\n                (click)=\\\"setDrawImage($event)\\\">\\n                <object [attr.data]=\\\"image.safeUrl\\\" [attr.data-url]=\\\"image.url\\\" type=\\\"image/svg+xml\\\"></object>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<div\\n    class=\\\"colorpicker\\\"\\n    [class.visible]=\\\"isVisibleColorpicker\\\">\\n    <button \\n        (click)=\\\"toggleColorpicker()\\\"\\n        class=\\\"colorpicker__close\\\"\\n        mat-fab \\n        color=\\\"accent\\\">\\n        <mat-icon>clear</mat-icon>\\n    </button>\\n    <app-mandala-editor-colorpicker \\n        [color]=\\\"color$ | async\\\"\\n        (changeColor)=\\\"onChangeColor($event)\\\">\\n    </app-mandala-editor-colorpicker>\\n</div>\"","export default \"<div *ngIf=\\\"isLoaded\\\">\\n    <app-mandala-editor-canvas [initState]=\\\"initState\\\"></app-mandala-editor-canvas>\\n    <div \\n        class=\\\"tools-container\\\"\\n        [class.visible]=\\\"isVisibleTools\\\">\\n        <app-mandala-editor-tools class=\\\"tools\\\"></app-mandala-editor-tools>\\n        <div \\n            class=\\\"toggle-tools\\\"\\n            (click)=\\\"toggleTools()\\\">\\n            <mat-icon>{{isVisibleTools ? 'keyboard_arrow_left' : 'keyboard_arrow_right'}}</mat-icon>\\n        </div>\\n    </div>\\n</div>\\n<div\\n    *ngIf=\\\"isEnabledLoader\\\"\\n    class=\\\"loader\\\">\\n    <mat-spinner></mat-spinner>\\n</div>\"","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","export default \".container {\\n  position: relative; }\\n  .container .editor {\\n    position: fixed;\\n    top: 0;\\n    left: 0;\\n    right: 0;\\n    bottom: 0;\\n    background: #eaeaea;\\n    overflow: auto; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldG9rb3ZlbmtvL0Rlc2t0b3AvcHJvamVjdHMvbWFuZGFsYS1hcHAvc3JjL2FwcC9hcHAuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxrQkFBa0IsRUFBQTtFQUR0QjtJQUdRLGVBQWU7SUFDZixNQUFNO0lBQ04sT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsbUJBQW1CO0lBQ25CLGNBQWMsRUFBQSIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jb250YWluZXIge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAuZWRpdG9yIHtcbiAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICB0b3A6IDA7XG4gICAgICAgIGxlZnQ6IDA7XG4gICAgICAgIHJpZ2h0OiAwO1xuICAgICAgICBib3R0b206IDA7XG4gICAgICAgIGJhY2tncm91bmQ6ICNlYWVhZWE7XG4gICAgICAgIG92ZXJmbG93OiBhdXRvO1xuICAgIH1cbn0iXX0= */\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'mandala-app';\n  size = {\n    width: 800,\n    height: 800\n  };\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { StoreModule } from '@ngrx/store';\nimport { AppRoutingModule } from './app-routing.module';\nimport { MandalaModule, AppCommonModule } from './modules';\n\nimport { environment } from 'src/environments/environment';\n\n\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { EffectsModule } from '@ngrx/effects';\n\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    AppCommonModule,\n    MandalaModule,\n    StoreModule.forRoot({}, {\n        runtimeChecks: {\n            strictStateImmutability: true,\n            strictActionImmutability: true\n        }\n    }),\n    StoreDevtoolsModule.instrument({\n      maxAge: 25,\n      logOnly: environment.production\n    }),\n    EffectsModule.forRoot([]),\n    BrowserAnimationsModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","\nimport { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\n\nimport * as layout from './store/reducers/layout';\nimport { LayoutService } from './services';\n\n@NgModule({\n    imports: [\n        StoreModule.forFeature('common', {\n            layout: layout.reducer,\n        })\n    ],\n    providers: [\n        LayoutService\n    ]\n})\nexport class AppCommonModule { }\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport * as layoutActions from '../store/actions/layout.actions';\nimport * as layoutSelectors from '../store/selectors/layout.selectors';\nimport { StoreService } from './store.service';\nimport { Store } from '@ngrx/store';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class LayoutService extends StoreService {\n    constructor(\n        store: Store<any>\n    ) {\n        super(store);\n    }\n\n    enableLoader() {\n        this.dispatch(layoutActions.enableLoader());\n    }\n\n    disableLoader() {\n        this.dispatch(layoutActions.disableLoader());\n    }\n\n    isEnabledLoader(): Observable<boolean> {\n        return this.select(layoutSelectors.isEnabledLoader);\n    }\n}\n","import { Store, Action, select } from '@ngrx/store';\n\nexport abstract class StoreService {\n    constructor(\n        protected store: Store<any>\n    ) {}\n\n    protected dispatch(action: Action) {\n        this.store.dispatch(action);\n    }\n\n    protected select(selector) {\n        return this.store.pipe(select(selector));\n    }\n}\n","import { createAction } from '@ngrx/store';\n\nexport const enableLoader = createAction('[Layout] Enable Loader');\nexport const disableLoader = createAction('[Layout] Disable Loader');\n","import { createReducer, on, Action } from '@ngrx/store';\nimport * as layoutActions from '../actions/layout.actions';\n\nexport interface LayoutState {\n    isEnabledLoader: boolean;\n}\n\nconst initState: LayoutState = {\n    isEnabledLoader: false\n};\n\nconst updateProp = (prop, status) => (state) => ({...state, [prop]: status});\nconst contentReducer = createReducer(\n    initState,\n    on(layoutActions.enableLoader, updateProp('isEnabledLoader', true)),\n    on(layoutActions.disableLoader, updateProp('isEnabledLoader', false)),\n);\n\nexport function reducer(state, action: Action) {\n    return contentReducer(state, action);\n}\n","import { createSelector } from '@ngrx/store';\n\nconst selectLayout = (state) => state.common.layout;\n\nconst getSelector = (prop) => {\n    return createSelector(\n        selectLayout,\n        (state) => state && state[prop]\n    );\n};\n\nexport const isEnabledLoader = getSelector('isEnabledLoader');\n","export default \"canvas {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0; }\\n\\n.container {\\n  position: relative;\\n  margin: 0 auto; }\\n\\n#canvas-zones,\\n#canvas-fill {\\n  pointer-events: none; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldG9rb3ZlbmtvL0Rlc2t0b3AvcHJvamVjdHMvbWFuZGFsYS1hcHAvc3JjL2FwcC9tb2R1bGVzL21hbmRhbGEvY29tcG9uZW50cy9tYW5kYWxhLWVkaXRvci9tYW5kYWxhLWVkaXRvci1jYW52YXMvbWFuZGFsYS1lZGl0b3ItY2FudmFzLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksa0JBQWtCO0VBQ2xCLE1BQU07RUFDTixPQUFPO0VBQ1AsUUFBUTtFQUNSLFNBQVMsRUFBQTs7QUFFYjtFQUNJLGtCQUFrQjtFQUNsQixjQUFjLEVBQUE7O0FBR2xCOztFQUVJLG9CQUFvQixFQUFBIiwiZmlsZSI6InNyYy9hcHAvbW9kdWxlcy9tYW5kYWxhL2NvbXBvbmVudHMvbWFuZGFsYS1lZGl0b3IvbWFuZGFsYS1lZGl0b3ItY2FudmFzL21hbmRhbGEtZWRpdG9yLWNhbnZhcy5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImNhbnZhcyB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBsZWZ0OiAwO1xuICAgIHJpZ2h0OiAwO1xuICAgIGJvdHRvbTogMDtcbn1cbi5jb250YWluZXIge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBtYXJnaW46IDAgYXV0bztcbn1cblxuI2NhbnZhcy16b25lcyxcbiNjYW52YXMtZmlsbCB7XG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG59Il19 */\"","import { Component, OnInit, OnDestroy, Input, ViewChild, ElementRef } from '@angular/core';\nimport { EditorService, CanvasService, CanvasSize, UndoService } from '../../../services';\nimport { Subject, of, concat } from 'rxjs';\nimport { takeUntil, first, mergeMap, map, last, delay } from 'rxjs/operators';\nimport { ToolService } from '../../../services/tool.service';\nimport { EditorDrawToolBase } from '../../../tools/draw.base';\nimport { EditorTapToolBase } from '../../../tools/tap.base';\nimport { LayoutService } from 'src/app/modules/common/services';\n\n\n@Component({\n  selector: 'app-mandala-editor-canvas',\n  templateUrl: './mandala-editor-canvas.component.html',\n  styleUrls: ['./mandala-editor-canvas.component.scss']\n})\nexport class MandalaEditorCanvasComponent implements OnInit, OnDestroy {\n    @Input() initState;\n    @ViewChild('drawCanvas', {static: true}) drawCanvas: ElementRef;\n    @ViewChild('fillCanvas', {static: true}) fillCanvas: ElementRef;\n    @ViewChild('zonesCanvas', {static: true}) zonesCanvas: ElementRef;\n    destroy$ = new Subject<boolean>();\n    tool: EditorTool;\n    size: CanvasSize;\n\n    get width() {\n        return `${this.size.width}px`;\n    }\n\n    get height() {\n        return `${this.size.height}px`;\n    }\n\n    constructor(\n        private editorService: EditorService,\n        private layoutService: LayoutService,\n        private canvasService: CanvasService,\n        private toolService: ToolService,\n        private undoService: UndoService\n    ) {}\n\n    ngOnInit() {\n        this.editorService.getSize().pipe(takeUntil(this.destroy$))\n            .subscribe(size => this.onChangeEditorSize(size));\n\n        this.canvasService.setZonesElement(this.zonesCanvas.nativeElement);\n        this.canvasService.setFillElement(this.fillCanvas.nativeElement);\n        this.canvasService.setDrawElement(this.drawCanvas.nativeElement);\n        this.canvasService.updateCanvasesSize(this.size);\n\n        this.layoutService.enableLoader();\n        this.initDraw().pipe(takeUntil(this.destroy$))\n            .subscribe(() => {\n                this.undoService.clear();\n\n                if (this.initState && this.initState.tool) {\n                    const { tool, color, strokeWidth, zonesCount, isDrawMirrored, smoothType } = this.initState;\n                    this.editorService.setTool(tool);\n                    this.editorService.setColor(color);\n                    this.editorService.setStrokeWidth(strokeWidth);\n                    this.editorService.setZonesCount(zonesCount);\n                    this.editorService.setSmoothType(smoothType);\n                    if (isDrawMirrored) {\n                        this.editorService.enableDrawMirrored();\n                    } else {\n                        this.editorService.disableDrawMirrored();\n                    }\n                }\n\n                this.editorService.inited();\n\n                this.editorService.getTool()\n                    .pipe(\n                        takeUntil(this.destroy$),\n                        mergeMap(tool => this.toolService.createTool(tool))\n                    ).subscribe((tool) => {\n                        if (this.tool) {\n                            this.tool.disable();\n                        }\n\n                        this.tool = tool;\n                        this.toolService.setCurrentTool(tool);\n                        tool.enable();\n                    });\n\n                this.layoutService.disableLoader();\n            });\n\n    }\n\n    ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.unsubscribe();\n    }\n\n    onChangeEditorSize(size) {\n        this.size = size;\n        this.canvasService.updateCanvasesSize(this.size);\n    }\n\n    initDraw() {\n        const drawSteps = [];\n        const steps = this.initState.steps || {};\n        for (const key in steps) {\n            if (steps.hasOwnProperty(key)) {\n                drawSteps.push(() => {\n                    return of(null)\n                    .pipe(\n                        delay(50),\n                        mergeMap(() => {\n                            const step = steps[key];\n                            this.editorService.setTool(step.tool);\n                            this.editorService.setColor(step.color);\n                            this.editorService.setStrokeWidth(step.strokeWidth);\n                            this.editorService.setZonesCount(step.zonesCount);\n                            this.editorService.setSmoothType(step.smoothType);\n                            if (step.isDrawMirrored) {\n                                this.editorService.enableDrawMirrored();\n                            } else {\n                                this.editorService.disableDrawMirrored();\n                            }\n\n                            return this.editorService.getTool()\n                                .pipe(\n                                    first(),\n                                    mergeMap(tool => this.toolService.createTool(tool))\n                                ).pipe(\n                                    map((tool) => {\n                                        if (this.tool) {\n                                            this.tool.disable();\n                                        }\n                                        this.tool = tool;\n                                        tool.enable();\n                                        step.points.forEach((point, index) => {\n                                            if (tool instanceof EditorDrawToolBase) {\n                                                if (index === 0) {\n                                                    tool.drawStart(point);\n                                                } else {\n                                                    tool.draw(point);\n                                                }\n                                            } else if (tool instanceof EditorTapToolBase) {\n                                                tool.tap(point);\n                                            }\n                                        });\n\n                                        if (tool instanceof EditorDrawToolBase) {\n                                            tool.drawEnd();\n                                        }\n\n                                        if (step.transformPoints) {\n                                            const drawTool = tool as EditorDrawToolBase;\n                                            step.transformPoints.forEach((points = []) => {\n                                                points.forEach((point, index) => {\n                                                    if (index === 0) {\n                                                        drawTool.transformStart(point);\n                                                    } else {\n                                                        drawTool.transform(point);\n                                                    }\n                                                });\n                                                drawTool.transformEnd();\n                                            });\n                                        }\n\n                                        if (tool instanceof EditorDrawToolBase) {\n                                            tool.finishDraw();\n                                        }\n\n                                        return tool;\n                                    })\n                                );\n                            })\n                        );\n                });\n            }\n        }\n\n        return !drawSteps.length ? of(null) : concat(\n            ...drawSteps.map(step => step())\n        ).pipe(last());\n    }\n}\n","export default \"canvas {\\n  width: 500px;\\n  height: 500px;\\n  position: absolute;\\n  top: 0;\\n  left: 0; }\\n\\n.container {\\n  position: relative;\\n  width: 500px;\\n  height: 500px; }\\n\\n#canvas-zones,\\n#canvas-fill {\\n  pointer-events: none; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldG9rb3ZlbmtvL0Rlc2t0b3AvcHJvamVjdHMvbWFuZGFsYS1hcHAvc3JjL2FwcC9tb2R1bGVzL21hbmRhbGEvY29tcG9uZW50cy9tYW5kYWxhLWVkaXRvci9tYW5kYWxhLWVkaXRvci1jb2xvcnBpY2tlci9tYW5kYWxhLWVkaXRvci1jb2xvcnBpY2tlci5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFlBQVk7RUFDWixhQUFhO0VBQ2Isa0JBQWtCO0VBQ2xCLE1BQU07RUFDTixPQUFPLEVBQUE7O0FBRVg7RUFDSSxrQkFBa0I7RUFDbEIsWUFBWTtFQUNaLGFBQWEsRUFBQTs7QUFHakI7O0VBRUksb0JBQW9CLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9tb2R1bGVzL21hbmRhbGEvY29tcG9uZW50cy9tYW5kYWxhLWVkaXRvci9tYW5kYWxhLWVkaXRvci1jb2xvcnBpY2tlci9tYW5kYWxhLWVkaXRvci1jb2xvcnBpY2tlci5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImNhbnZhcyB7XG4gICAgd2lkdGg6IDUwMHB4O1xuICAgIGhlaWdodDogNTAwcHg7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBsZWZ0OiAwO1xufVxuLmNvbnRhaW5lciB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHdpZHRoOiA1MDBweDtcbiAgICBoZWlnaHQ6IDUwMHB4O1xufVxuXG4jY2FudmFzLXpvbmVzLFxuI2NhbnZhcy1maWxsIHtcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbn0iXX0= */\"","import { Component, ViewChild, ElementRef, AfterViewInit, Input, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport iro from '@jaames/iro';\nimport { EditorService } from '../../../services';\n\n\n@Component({\n  selector: 'app-mandala-editor-colorpicker',\n  templateUrl: './mandala-editor-colorpicker.component.html',\n  styleUrls: ['./mandala-editor-colorpicker.component.scss']\n})\nexport class MandalaEditorColorpickerComponent implements AfterViewInit, OnDestroy {\n    @Input() color: string;\n    @Output() changeColor = new EventEmitter<string>();\n    @ViewChild('picker', {static: true}) picker: ElementRef;\n    colorPicker: iro.ColorPicker;\n    destroy$ = new Subject<boolean>();\n\n    constructor(\n        public editorService: EditorService\n    ) {}\n\n    ngAfterViewInit() {\n        this.colorPicker = new iro.ColorPicker(this.picker.nativeElement, {\n            width: 300,\n            handleRadius: 12,\n            sliderHeight: 30,\n            color: this.color\n        });\n\n        this.colorPicker.on('color:change', color => this.changeColor.emit(color.rgbString));\n\n        this.editorService.getColor().pipe(takeUntil(this.destroy$))\n            .subscribe(color => this.onChangeColor(color));\n    }\n\n    ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.unsubscribe();\n    }\n\n    onChangeColor(color: string) {\n        if (this.colorPicker.color.rgbString !== color) {\n            this.colorPicker.color.rgbString = color;\n        }\n    }\n}\n","export default \".svg-container /deep/ svg {\\n  max-width: calc(100vw - 120px) !important;\\n  max-height: calc(100vh - 120px) !important; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldG9rb3ZlbmtvL0Rlc2t0b3AvcHJvamVjdHMvbWFuZGFsYS1hcHAvc3JjL2FwcC9tb2R1bGVzL21hbmRhbGEvY29tcG9uZW50cy9tYW5kYWxhLWVkaXRvci9tYW5kYWxhLWVkaXRvci1leHBvcnQtc3ZnL21hbmRhbGEtZWRpdG9yLWV4cG9ydC1zdmcuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFHWSx5Q0FBeUM7RUFDekMsMENBQTBDLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9tb2R1bGVzL21hbmRhbGEvY29tcG9uZW50cy9tYW5kYWxhLWVkaXRvci9tYW5kYWxhLWVkaXRvci1leHBvcnQtc3ZnL21hbmRhbGEtZWRpdG9yLWV4cG9ydC1zdmcuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuc3ZnLWNvbnRhaW5lciB7XG4gICAgL2RlZXAvIHtcbiAgICAgICAgc3ZnIHtcbiAgICAgICAgICAgIG1heC13aWR0aDogY2FsYygxMDB2dyAtIDEyMHB4KSAhaW1wb3J0YW50O1xuICAgICAgICAgICAgbWF4LWhlaWdodDogY2FsYygxMDB2aCAtIDEyMHB4KSAhaW1wb3J0YW50O1xuICAgICAgICB9XG4gICAgfVxufSJdfQ== */\"","import { Component, Input, ViewChild, ElementRef, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-mandala-editor-export-svg',\n  templateUrl: './mandala-editor-export-svg.component.html',\n  styleUrls: ['./mandala-editor-export-svg.component.scss']\n})\nexport class MandalaEditorExportSvgComponent implements OnInit {\n    @Input() svg: string;\n    @ViewChild('container', {static: true}) container: ElementRef;\n\n    ngOnInit() {\n      this.container.nativeElement.innerHTML = this.svg;\n    }\n}\n","export default \"button.active {\\n  background-color: #00bcd4;\\n  color: white; }\\n\\nbutton:not(.active) {\\n  background-color: white;\\n  color: black; }\\n\\n.container {\\n  display: -webkit-box;\\n  display: flex; }\\n\\n.container .tools .tools__item {\\n    margin-top: -3px; }\\n\\n.container .tools .tools__item--zones {\\n      display: -webkit-box;\\n      display: flex;\\n      -webkit-box-pack: justify;\\n              justify-content: space-between;\\n      -webkit-box-align: center;\\n              align-items: center;\\n      border: 1px #cbcbcb dashed;\\n      margin-bottom: 20px;\\n      padding: 3px; }\\n\\n.container .tools .tools__item--zones button {\\n        width: 15px;\\n        height: 15px;\\n        line-height: 15px; }\\n\\n.container .tools .tools__item--zones .mat-icon {\\n        width: 15px;\\n        height: 16px;\\n        line-height: 15px;\\n        font-size: 15px; }\\n\\n.container .sub-tools {\\n    margin-left: 15px;\\n    padding-left: 15px;\\n    position: relative;\\n    display: -webkit-box;\\n    display: flex;\\n    -webkit-box-align: center;\\n            align-items: center;\\n    -webkit-box-orient: vertical;\\n    -webkit-box-direction: normal;\\n            flex-direction: column; }\\n\\n.container .sub-tools::after {\\n      content: ' ';\\n      position: absolute;\\n      width: 1px;\\n      top: 40px;\\n      bottom: 40px;\\n      left: 0;\\n      background: #e3dede; }\\n\\n.container .sub-tools__item {\\n      margin-bottom: 15px; }\\n\\n.container .sub-tools__item--smooth-type {\\n        width: 70px;\\n        font-size: 13px; }\\n\\n.container .sub-tools__item--color .color-preview {\\n        width: 70px;\\n        height: 70px;\\n        box-shadow: 0 0 5px grey;\\n        border-radius: 3px;\\n        cursor: pointer; }\\n\\n.container .sub-tools__item--stroke-width {\\n        -webkit-box-flex: 1;\\n                flex-grow: 1; }\\n\\n.container .sub-tools__item--stroke-width .mat-slider {\\n          height: 100%; }\\n\\n.container .sub-tools__item--images .active {\\n        border: 1px dashed #fb3939;\\n        border-radius: 3px; }\\n\\n.container .sub-tools__item--images object {\\n        width: 70px;\\n        pointer-events: none; }\\n\\n.colorpicker {\\n  display: block;\\n  background: white;\\n  padding: 20px;\\n  box-shadow: 0 0 10px grey;\\n  position: absolute;\\n  top: 0px;\\n  left: -350px;\\n  bottom: 0px;\\n  z-index: 2;\\n  -webkit-transition: left 300ms;\\n  transition: left 300ms; }\\n\\n.colorpicker.visible {\\n    left: 0; }\\n\\n.colorpicker__close {\\n    position: absolute;\\n    right: -10px;\\n    top: -10px; }\\n\\n.undo-controls {\\n  position: absolute;\\n  top: -28px;\\n  left: 60px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldG9rb3ZlbmtvL0Rlc2t0b3AvcHJvamVjdHMvbWFuZGFsYS1hcHAvc3JjL2FwcC9tb2R1bGVzL21hbmRhbGEvY29tcG9uZW50cy9tYW5kYWxhLWVkaXRvci9tYW5kYWxhLWVkaXRvci10b29scy9tYW5kYWxhLWVkaXRvci10b29scy5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLHlCQUF5QjtFQUN6QixZQUFZLEVBQUE7O0FBRWhCO0VBQ0ksdUJBQXVCO0VBQ3ZCLFlBQVksRUFBQTs7QUFHaEI7RUFDSSxvQkFBYTtFQUFiLGFBQWEsRUFBQTs7QUFEakI7SUFLWSxnQkFBZ0IsRUFBQTs7QUFMNUI7TUFRZ0Isb0JBQWE7TUFBYixhQUFhO01BQ2IseUJBQThCO2NBQTlCLDhCQUE4QjtNQUM5Qix5QkFBbUI7Y0FBbkIsbUJBQW1CO01BQ25CLDBCQUEwQjtNQUMxQixtQkFBbUI7TUFDbkIsWUFBWSxFQUFBOztBQWI1QjtRQWdCb0IsV0FBVztRQUNYLFlBQVk7UUFDWixpQkFBaUIsRUFBQTs7QUFsQnJDO1FBcUJvQixXQUFXO1FBQ1gsWUFBWTtRQUNaLGlCQUFpQjtRQUNqQixlQUFlLEVBQUE7O0FBeEJuQztJQStCUSxpQkFBaUI7SUFDakIsa0JBQWtCO0lBQ2xCLGtCQUFrQjtJQUNsQixvQkFBYTtJQUFiLGFBQWE7SUFDYix5QkFBbUI7WUFBbkIsbUJBQW1CO0lBQ25CLDRCQUFzQjtJQUF0Qiw2QkFBc0I7WUFBdEIsc0JBQXNCLEVBQUE7O0FBcEM5QjtNQXVDWSxZQUFZO01BQ1osa0JBQWtCO01BQ2xCLFVBQVU7TUFDVixTQUFTO01BQ1QsWUFBWTtNQUNaLE9BQU87TUFDUCxtQkFBbUIsRUFBQTs7QUE3Qy9CO01BaURZLG1CQUFtQixFQUFBOztBQWpEL0I7UUFtRGdCLFdBQVc7UUFDWCxlQUFlLEVBQUE7O0FBcEQvQjtRQXdEb0IsV0FBVztRQUNYLFlBQVk7UUFDWix3QkFBd0I7UUFDeEIsa0JBQWtCO1FBQ2xCLGVBQWUsRUFBQTs7QUE1RG5DO1FBZ0VnQixtQkFBWTtnQkFBWixZQUFZLEVBQUE7O0FBaEU1QjtVQW1Fb0IsWUFBWSxFQUFBOztBQW5FaEM7UUF3RW9CLDBCQUEwQjtRQUMxQixrQkFBa0IsRUFBQTs7QUF6RXRDO1FBNEVvQixXQUFXO1FBQ1gsb0JBQW9CLEVBQUE7O0FBT3hDO0VBQ0ksY0FBYztFQUNkLGlCQUFpQjtFQUNqQixhQUFhO0VBQ2IseUJBQXlCO0VBQ3pCLGtCQUFrQjtFQUNsQixRQUFRO0VBQ1IsWUFBWTtFQUNaLFdBQVc7RUFDWCxVQUFVO0VBQ1YsOEJBQXNCO0VBQXRCLHNCQUFzQixFQUFBOztBQVYxQjtJQVlRLE9BQU8sRUFBQTs7QUFHWDtJQUNJLGtCQUFrQjtJQUNsQixZQUFZO0lBQ1osVUFBVSxFQUFBOztBQUlsQjtFQUNJLGtCQUFrQjtFQUNsQixVQUFVO0VBQ1YsVUFBVSxFQUFBIiwiZmlsZSI6InNyYy9hcHAvbW9kdWxlcy9tYW5kYWxhL2NvbXBvbmVudHMvbWFuZGFsYS1lZGl0b3IvbWFuZGFsYS1lZGl0b3ItdG9vbHMvbWFuZGFsYS1lZGl0b3ItdG9vbHMuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJidXR0b24uYWN0aXZlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDBiY2Q0O1xuICAgIGNvbG9yOiB3aGl0ZTtcbn1cbmJ1dHRvbjpub3QoLmFjdGl2ZSkge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgIGNvbG9yOiBibGFjaztcbn1cblxuLmNvbnRhaW5lciB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBcbiAgICAudG9vbHMge1xuICAgICAgICAudG9vbHNfX2l0ZW0ge1xuICAgICAgICAgICAgbWFyZ2luLXRvcDogLTNweDtcblxuICAgICAgICAgICAgJi0tem9uZXMge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggI2NiY2JjYiBkYXNoZWQ7XG4gICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAzcHg7XG5cbiAgICAgICAgICAgICAgICBidXR0b24ge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTVweDtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxNXB4O1xuICAgICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMTVweDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLm1hdC1pY29uIHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDE1cHg7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTZweDtcbiAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDE1cHg7XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTVweDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLnN1Yi10b29scyB7XG4gICAgICAgIG1hcmdpbi1sZWZ0OiAxNXB4O1xuICAgICAgICBwYWRkaW5nLWxlZnQ6IDE1cHg7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblxuICAgICAgICAmOjphZnRlciB7XG4gICAgICAgICAgICBjb250ZW50OiAnICc7XG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICB3aWR0aDogMXB4O1xuICAgICAgICAgICAgdG9wOiA0MHB4O1xuICAgICAgICAgICAgYm90dG9tOiA0MHB4O1xuICAgICAgICAgICAgbGVmdDogMDtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICNlM2RlZGU7XG4gICAgICAgIH1cblxuICAgICAgICAmX19pdGVtIHtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDE1cHg7XG4gICAgICAgICAgICAmLS1zbW9vdGgtdHlwZSB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDcwcHg7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxM3B4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJi0tY29sb3Ige1xuICAgICAgICAgICAgICAgIC5jb2xvci1wcmV2aWV3IHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDcwcHg7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogNzBweDtcbiAgICAgICAgICAgICAgICAgICAgYm94LXNoYWRvdzogMCAwIDVweCBncmV5O1xuICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAzcHg7O1xuICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJi0tc3Ryb2tlLXdpZHRoIHtcbiAgICAgICAgICAgICAgICBmbGV4LWdyb3c6IDE7XG5cbiAgICAgICAgICAgICAgICAubWF0LXNsaWRlciB7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAmLS1pbWFnZXMge1xuICAgICAgICAgICAgICAgIC5hY3RpdmUge1xuICAgICAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBkYXNoZWQgI2ZiMzkzOTtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogM3B4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvYmplY3Qge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogNzBweDtcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4uY29sb3JwaWNrZXIge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgIHBhZGRpbmc6IDIwcHg7XG4gICAgYm94LXNoYWRvdzogMCAwIDEwcHggZ3JleTtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwcHg7XG4gICAgbGVmdDogLTM1MHB4O1xuICAgIGJvdHRvbTogMHB4O1xuICAgIHotaW5kZXg6IDI7XG4gICAgdHJhbnNpdGlvbjogbGVmdCAzMDBtcztcbiAgICAmLnZpc2libGUge1xuICAgICAgICBsZWZ0OiAwO1xuICAgIH1cblxuICAgICZfX2Nsb3NlIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICByaWdodDogLTEwcHg7XG4gICAgICAgIHRvcDogLTEwcHg7XG4gICAgfVxufVxuXG4udW5kby1jb250cm9scyB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogLTI4cHg7XG4gICAgbGVmdDogNjBweDtcbn0iXX0= */\"","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Subject, Observable } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as paper from 'paper';\nimport { saveAs } from 'file-saver';\nimport { EditorService, UndoService, CanvasService, ToolService } from '../../../services';\nimport { TOOLS, DRAW_IMAGES } from '../../../enums/tools';\nimport { DrawImageTool } from '../../../tools';\nimport { UserDrawTool } from '../../../store/reducers/editor.reducer';\nimport { MandalaEditorExportSvgComponent } from '../mandala-editor-export-svg/mandala-editor-export-svg.component';\nimport { SMOOTH_TYPES, smoothTypesList } from '../../../enums/smooth-types';\n\n@Component({\n  selector: 'app-mandala-editor-tools',\n  templateUrl: './mandala-editor-tools.component.html',\n  styleUrls: ['./mandala-editor-tools.component.scss']\n})\nexport class MandalaEditorToolsComponent implements OnInit, OnDestroy {\n    destroy$ = new Subject<boolean>();\n    tool: UserDrawTool;\n    zonesCount: number;\n    isDrawMirrored: boolean;\n    color$: Observable<string>;\n    currentStrokeWidth: number;\n    currentSmoothType: SMOOTH_TYPES;\n    isVisibleColorpicker = false;\n    drawImages = [];\n    TOOLS = TOOLS;\n    smoothTypes = smoothTypesList;\n\n    get isDrawTool() {\n        return this.tool && [TOOLS.DRAW_FREE, TOOLS.DRAW_LINE, TOOLS.DRAW_IMAGE].includes(this.tool.type);\n    }\n\n    get isDrawWithStrokeTool() {\n        return this.tool && [TOOLS.DRAW_FREE, TOOLS.DRAW_LINE].includes(this.tool.type);\n    }\n\n    get isMirrorEnabled() {\n        return this.isDrawMirrored;\n    }\n\n    set isMirrorEnabled(state: boolean) {\n        if (state) {\n            this.editorService.enableDrawMirrored();\n        } else {\n            this.editorService.disableDrawMirrored();\n        }\n    }\n\n    get smoothType() {\n        return this.currentSmoothType;\n    }\n\n    set smoothType(type: SMOOTH_TYPES) {\n        this.editorService.setSmoothType(type);\n    }\n\n    get strokeWidth() {\n        return this.currentStrokeWidth;\n    }\n\n    set strokeWidth(width: number) {\n        this.editorService.setStrokeWidth(width);\n    }\n\n    get hasUndo() {\n        return this.undoService.hasUndo();\n    }\n\n    get hasRedo() {\n        return this.undoService.hasRedo();\n    }\n\n    constructor(\n        private editorService: EditorService,\n        private canvasService: CanvasService,\n        private toolService: ToolService,\n        private undoService: UndoService,\n        private domSanitizer: DomSanitizer,\n        private dialog: MatDialog\n    ) {}\n\n    ngOnInit() {\n        this.drawImages = DRAW_IMAGES\n            .map((image) => ({\n                url: image,\n                safeUrl: this.domSanitizer.bypassSecurityTrustResourceUrl(image)\n            }));\n\n        this.editorService.getTool()\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(tool => this.tool = tool);\n\n        this.editorService.isDrawMirrored()\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(isDrawMirrored => this.isDrawMirrored = isDrawMirrored);\n\n        this.editorService.getStrokeWidth()\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(strokeWidth => this.currentStrokeWidth = strokeWidth);\n\n        this.editorService.getSmoothType()\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(type => this.currentSmoothType = type);\n\n        this.editorService.getZonesCount()\n            .pipe(takeUntil(this.destroy$))\n                .subscribe(zonesCount => this.zonesCount = zonesCount);\n\n        this.color$ = this.editorService.getColor();\n    }\n\n    ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.unsubscribe();\n    }\n\n    isCurrentTool(tool: TOOLS): boolean {\n        return this.tool && this.tool.type === tool;\n    }\n\n    isCurrentImageDraw(imagePath: string): boolean {\n        const tool = (this.toolService.getCurrentTool() || {}) as DrawImageTool;\n        return tool.toolParams && tool.toolParams.imagePath === imagePath;\n    }\n\n    enableTool(tool: TOOLS) {\n        this.editorService.setTool({type: tool});\n    }\n\n    decreaseZones() {\n        this.editorService.setZonesCount(this.zonesCount - 1);\n    }\n\n    increaseZones() {\n        this.editorService.setZonesCount(this.zonesCount + 1);\n    }\n\n    clear() {\n        if (confirm('Are you sure?')) {\n            paper.project.activeLayer.remove();\n            const drawLayer = new paper.Layer();\n            drawLayer.activate();\n\n            this.canvasService.clear();\n            this.undoService.clear();\n            this.editorService.updateSize(null);\n            this.editorService.clearUserDrawSteps();\n        }\n    }\n\n    toSVG() {\n        const {width, height} = this.canvasService.getCanvasRect();\n        const size = new paper.Size(width, height);\n        const project = new paper.Project(size);\n        project.view.autoUpdate = false;\n\n        const layerBg = this.canvasService.drawProject.layers[0].clone() as paper.Layer;\n        project.addLayer(layerBg);\n        const groups = this.canvasService.getExportPaperGroups();\n        groups.forEach(group => project.activeLayer.addChild(group));\n        const svg = project.exportSVG({asString: true}) as string;\n        project.remove();\n\n        this.canvasService.drawProject.activate();\n\n        const blob = new Blob([svg], {type: 'image/svg+xmltext/plain;charset=utf-8'});\n        saveAs(blob, `mandala-${Date.now()}.svg`);\n    }\n\n    openDialog(svg: string) {\n        const dialogRef = this.dialog.open(MandalaEditorExportSvgComponent, {\n            maxWidth: 'calc(100vw - 50px)',\n            maxHeight: 'calc(100vh - 50px)'\n        });\n        dialogRef.componentInstance.svg = svg;\n    }\n\n    onChangeColor(color: string) {\n        this.editorService.setColor(color);\n    }\n\n    toggleColorpicker() {\n        this.isVisibleColorpicker = !this.isVisibleColorpicker;\n    }\n\n    undo() {\n        this.undoService.undo();\n    }\n\n    redo() {\n        this.undoService.redo();\n    }\n\n    setDrawImage({target}) {\n        const objElement = target.firstElementChild;\n        const imgPath = objElement.dataset.url;\n        const svg = objElement.contentDocument.firstElementChild;\n        const tool = this.toolService.getCurrentTool() as DrawImageTool;\n        tool.setDrawImage(svg, imgPath);\n    }\n}\n","export default \".tools-container {\\n  display: block;\\n  background: white;\\n  position: fixed;\\n  top: 40px;\\n  left: -198px;\\n  -webkit-transition: left 300ms;\\n  transition: left 300ms; }\\n  .tools-container.visible {\\n    left: -1px; }\\n  .tools-container .tools {\\n    display: block;\\n    padding: 20px;\\n    box-shadow: 0 0 10px grey;\\n    position: relative;\\n    z-index: 2;\\n    background: white; }\\n  .tools-container .toggle-tools {\\n    position: absolute;\\n    right: -47px;\\n    top: 30px;\\n    background: #b24f47;\\n    color: white;\\n    padding: 9px;\\n    box-shadow: 0 0 4px grey;\\n    border-radius: 3px;\\n    z-index: 1;\\n    cursor: pointer; }\\n  .tools-container .toggle-tools .mat-icon {\\n      font-size: 35px;\\n      line-height: 35px;\\n      width: 35px;\\n      height: 35px; }\\n  .loader {\\n  right: 0;\\n  position: absolute;\\n  top: 0;\\n  bottom: 0;\\n  left: 0;\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-align: center;\\n          align-items: center;\\n  -webkit-box-pack: center;\\n          justify-content: center;\\n  z-index: 3;\\n  background-color: white; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldG9rb3ZlbmtvL0Rlc2t0b3AvcHJvamVjdHMvbWFuZGFsYS1hcHAvc3JjL2FwcC9tb2R1bGVzL21hbmRhbGEvY29tcG9uZW50cy9tYW5kYWxhLWVkaXRvci9tYW5kYWxhLWVkaXRvci5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGNBQWM7RUFDZCxpQkFBaUI7RUFDakIsZUFBZTtFQUNmLFNBQVM7RUFDVCxZQUFZO0VBQ1osOEJBQXNCO0VBQXRCLHNCQUFzQixFQUFBO0VBTjFCO0lBUVEsVUFBVSxFQUFBO0VBUmxCO0lBV1EsY0FBYztJQUNkLGFBQWE7SUFDYix5QkFBeUI7SUFDekIsa0JBQWtCO0lBQ2xCLFVBQVU7SUFDVixpQkFBaUIsRUFBQTtFQWhCekI7SUFtQlEsa0JBQWtCO0lBQ2xCLFlBQVk7SUFDWixTQUFTO0lBQ1QsbUJBQW1CO0lBQ25CLFlBQVk7SUFDWixZQUFZO0lBQ1osd0JBQXdCO0lBQ3hCLGtCQUFrQjtJQUNsQixVQUFVO0lBQ1YsZUFBZSxFQUFBO0VBNUJ2QjtNQStCWSxlQUFlO01BQ2YsaUJBQWlCO01BQ2pCLFdBQVc7TUFDWCxZQUFZLEVBQUE7RUFLeEI7RUFDSSxRQUFRO0VBQ1Isa0JBQWtCO0VBQ2xCLE1BQU07RUFDTixTQUFTO0VBQ1QsT0FBTztFQUNQLG9CQUFhO0VBQWIsYUFBYTtFQUNiLHlCQUFtQjtVQUFuQixtQkFBbUI7RUFDbkIsd0JBQXVCO1VBQXZCLHVCQUF1QjtFQUN2QixVQUFVO0VBQ1YsdUJBQXVCLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9tb2R1bGVzL21hbmRhbGEvY29tcG9uZW50cy9tYW5kYWxhLWVkaXRvci9tYW5kYWxhLWVkaXRvci5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi50b29scy1jb250YWluZXIge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICB0b3A6IDQwcHg7XG4gICAgbGVmdDogLTE5OHB4O1xuICAgIHRyYW5zaXRpb246IGxlZnQgMzAwbXM7XG4gICAgJi52aXNpYmxlIHtcbiAgICAgICAgbGVmdDogLTFweDtcbiAgICB9XG4gICAgLnRvb2xzIHtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIHBhZGRpbmc6IDIwcHg7XG4gICAgICAgIGJveC1zaGFkb3c6IDAgMCAxMHB4IGdyZXk7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgei1pbmRleDogMjtcbiAgICAgICAgYmFja2dyb3VuZDogd2hpdGU7XG4gICAgfVxuICAgIC50b2dnbGUtdG9vbHMge1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHJpZ2h0OiAtNDdweDtcbiAgICAgICAgdG9wOiAzMHB4O1xuICAgICAgICBiYWNrZ3JvdW5kOiAjYjI0ZjQ3O1xuICAgICAgICBjb2xvcjogd2hpdGU7XG4gICAgICAgIHBhZGRpbmc6IDlweDtcbiAgICAgICAgYm94LXNoYWRvdzogMCAwIDRweCBncmV5O1xuICAgICAgICBib3JkZXItcmFkaXVzOiAzcHg7XG4gICAgICAgIHotaW5kZXg6IDE7XG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcblxuICAgICAgICAubWF0LWljb24ge1xuICAgICAgICAgICAgZm9udC1zaXplOiAzNXB4O1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDM1cHg7XG4gICAgICAgICAgICB3aWR0aDogMzVweDtcbiAgICAgICAgICAgIGhlaWdodDogMzVweDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLmxvYWRlciB7XG4gICAgcmlnaHQ6IDA7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBib3R0b206IDA7XG4gICAgbGVmdDogMDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgei1pbmRleDogMztcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbn0iXX0= */\"","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport * as paper from 'paper';\nimport { EditorService, UndoService, CanvasSize, IdbService } from '../../services';\nimport { LayoutService } from '../../../common/services';\nimport { UserDrawState } from '../../store/reducers/editor.reducer';\nimport { delay } from 'rxjs/operators';\n\n\n@Component({\n  selector: 'app-mandala-editor',\n  templateUrl: './mandala-editor.component.html',\n  styleUrls: ['./mandala-editor.component.scss']\n})\nexport class MandalaEditorComponent implements OnInit, OnDestroy {\n    @Input() size: CanvasSize;\n    @Input() fullScreen: boolean;\n\n    fullScreenSize: CanvasSize;\n    isVisibleTools = false;\n    isLoaded = false;\n    isEnabledLoader: boolean;\n    isEnabledLoader$: Observable<boolean>;\n    initState: UserDrawState;\n\n    get canvasSize() {\n        return this.fullScreen && !this.size ? this.fullScreenSize : this.size;\n    }\n\n    constructor(\n        private undoService: UndoService,\n        private idbService: IdbService,\n        private editorService: EditorService,\n        private layoutService: LayoutService\n    ) {}\n\n    ngOnInit() {\n        paper.settings.handleSize = 10;\n        paper.settings.hitTolerance = 3;\n\n        this.isEnabledLoader$ = this.layoutService.isEnabledLoader();\n        this.isEnabledLoader$.pipe(delay(0)).subscribe((isEnabledLoader) => {\n            this.isEnabledLoader = isEnabledLoader;\n        });\n\n        this.undoService.enable();\n\n        this.editorService.getSize().pipe().subscribe((size) => {\n            if (!size) {\n                this.isLoaded = false;\n                this.size = null;\n                setTimeout(() => this.initEditor(), 1000);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        this.undoService.disable();\n    }\n\n    toggleTools() {\n        this.isVisibleTools = !this.isVisibleTools;\n    }\n\n    initEditor() {\n        this.isLoaded = false;\n\n        this.fullScreenSize = {\n            width: window.innerWidth,\n            height: window.innerHeight,\n        };\n\n        this.idbService.getUserDrawState('current-state')\n            .then((state) => {\n                this.initState = state;\n\n                if (state.size) {\n                    this.size = state.size;\n                } else {\n                    state.size = this.canvasSize;\n                    this.idbService.saveUserDrawState('current-state', state);\n                }\n                this.editorService.updateSize(this.canvasSize);\n\n                this.isLoaded = true;\n            });\n    }\n}\n","import { Directive, OnDestroy, ElementRef, AfterViewInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { EditorService, CanvasService } from '../services';\n\ninterface ZonePoint {\n    x: number;\n    y: number;\n}\n\n@Directive({\n    selector: '[appMandalaDrawZones]'\n})\nexport class MandalaDrawZonesDirective implements AfterViewInit, OnDestroy {\n    destroy$ = new Subject<boolean>();\n    zonesCount: number;\n    isDrawMirrored: boolean;\n    ctx: CanvasRenderingContext2D;\n\n    constructor(\n        private editorService: EditorService,\n        private canvasService: CanvasService,\n        private el: ElementRef\n    ) {}\n\n    ngAfterViewInit() {\n        this.ctx = this.el.nativeElement.getContext('2d');\n\n        this.editorService.getZonesCount().pipe(takeUntil(this.destroy$))\n            .subscribe(zonesCount => this.onChangeZonesCount(zonesCount));\n\n        this.editorService.isDrawMirrored().pipe(takeUntil(this.destroy$))\n            .subscribe(isDrawMirrored => this.onChangeIsDrawMirrored(isDrawMirrored));\n    }\n\n    ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.unsubscribe();\n    }\n\n    onChangeZonesCount(zonesCount) {\n        this.zonesCount = zonesCount;\n        this.redrawZones();\n    }\n\n    onChangeIsDrawMirrored(isDrawMirrored) {\n        this.isDrawMirrored = isDrawMirrored;\n        this.redrawZones();\n    }\n\n    redrawZones() {\n        const { width, height } = this.canvasService.getCanvasSize();\n\n        this.ctx.clearRect(0, 0, width, height);\n\n        const x = width / 2;\n        const y = height / 2;\n\n        this.drawCenterCircle(x, y);\n\n        if ( this.zonesCount > 1) {\n            const length = Math.sqrt((width * width) + (height * height));\n            const step = 360 / this.zonesCount;\n            for (let i = 0; i < this.zonesCount; i++) {\n                const angle = 0 + i * step;\n                const line = this.calcEndPoint(x, y, length, angle);\n                this.drawAngledLine(x, y, line.x, line.y);\n                if (this.isDrawMirrored) {\n                    const mirrorAngle = angle + (step / 2);\n                    const mirrorLine = this.calcEndPoint(x, y, length, mirrorAngle);\n                    this.drawAngledLine(x, y, mirrorLine.x, mirrorLine.y, [3, 30]);\n                }\n            }\n        }\n    }\n\n    calcEndPoint(x: number, y: number, length: number, angle: number): ZonePoint {\n        const radians = angle / 180 * Math.PI;\n        return {\n            x: x + length * Math.cos(radians),\n            y: y - length * Math.sin(radians)\n        };\n    }\n\n    drawCenterCircle(x: number, y: number, lineWidth = 4, color = 'grey') {\n        this.ctx.beginPath();\n        this.ctx.fillStyle = color;\n        this.ctx.strokeStyle = color;\n        this.ctx.setLineDash([]);\n        this.ctx.arc(x, y, lineWidth, 0, 2 * Math.PI);\n        this.ctx.fill();\n    }\n\n    drawAngledLine(\n        startX: number, startY: number, endX: number,\n        endY: number, dashSize = [5, 15], color = 'grey'\n    ) {\n        this.ctx.beginPath();\n        this.ctx.strokeStyle = color;\n        this.ctx.setLineDash(dashSize);\n        this.ctx.moveTo(startX, startY);\n        this.ctx.lineTo(endX, endY);\n        this.ctx.closePath();\n        this.ctx.stroke();\n    }\n}\n","export enum SMOOTH_TYPES {\n    WITHOUT_SMOOTH,\n    LIGHT_SMOOTH,\n    HARD_SMOOTH\n}\n\nexport const smoothTypesList = [{\n    type: SMOOTH_TYPES.WITHOUT_SMOOTH,\n    name: 'Without smooth'\n}, {\n    type: SMOOTH_TYPES.LIGHT_SMOOTH,\n    name: 'Light smooth'\n}, {\n    type: SMOOTH_TYPES.HARD_SMOOTH,\n    name: 'Hard smooth'\n}];\n","export enum TOOLS {\n    DRAW_FREE,\n    DRAW_LINE,\n    DRAW_IMAGE,\n    FILL_BACKGROUND,\n    FILL_BUCKET,\n    PIPETTE\n}\n\nexport const DRAW_IMAGES = [\n    '/assets/circle.svg',\n    '/assets/test.svg',\n    '/assets/skull.svg',\n    '/assets/lego.svg'\n];\n","/*\r\n Magic wand tool (fuzzy selection) by color\r\n\r\n @package magic-wand-tool\r\n @author Ryasnoy Paul <ryasnoypaul@gmail.com>\r\n @version 1.1.4\r\n @license MIT\r\n @copyright (c) 2014-2019, Ryasnoy Paul <ryasnoypaul@gmail.com>\r\n\r\n*/\r\n\r\n    var lib = {};\r\n\r\n    /** Create a binary mask on the image by color threshold\r\n      * Algorithm: Scanline flood fill (http://en.wikipedia.org/wiki/Flood_fill)\r\n      * @param {Object} image: {Uint8Array} data, {int} width, {int} height, {int} bytes\r\n      * @param {int} x of start pixel\r\n      * @param {int} y of start pixel\r\n      * @param {int} color threshold\r\n      * @param {Uint8Array} mask of visited points (optional) \r\n      * @param {boolean} [includeBorders=false] indicate whether to include borders pixels\r\n      * @return {Object} mask: {Uint8Array} data, {int} width, {int} height, {Object} bounds\r\n      */\r\n    lib.floodFill = function(image, px, py, colorThreshold, mask, includeBorders) {\r\n        return includeBorders\r\n            ? floodFillWithBorders(image, px, py, colorThreshold, mask)\r\n            : floodFillWithoutBorders(image, px, py, colorThreshold, mask);\r\n    };\r\n\r\n    function floodFillWithoutBorders(image, px, py, colorThreshold, mask) {\r\n\r\n        var c, x, newY, el, xr, xl, dy, dyl, dyr, checkY,\r\n            data = image.data,\r\n            w = image.width,\r\n            h = image.height,\r\n            bytes = image.bytes, // number of bytes in the color\r\n            maxX = -1, minX = w + 1, maxY = -1, minY = h + 1,\r\n            i = py * w + px, // start point index in the mask data\r\n            result = new Uint8Array(w * h), // result mask\r\n            visited = new Uint8Array(mask ? mask : w * h); // mask of visited points\r\n\r\n        if (visited[i] === 1) return null;\r\n\r\n        i = i * bytes; // start point index in the image data\r\n        var sampleColor = [data[i], data[i + 1], data[i + 2], data[i + 3]]; // start point color (sample)\r\n\r\n        var stack = [{ y: py, left: px - 1, right: px + 1, dir: 1 }]; // first scanning line\r\n        do {\r\n            el = stack.shift(); // get line for scanning\r\n\r\n            checkY = false;\r\n            for (x = el.left + 1; x < el.right; x++) {\r\n                dy = el.y * w;\r\n                i = (dy + x) * bytes; // point index in the image data\r\n\r\n                if (visited[dy + x] === 1) continue; // check whether the point has been visited\r\n                // compare the color of the sample\r\n                c = data[i] - sampleColor[0]; // check by red\r\n                if (c > colorThreshold || c < -colorThreshold) continue;\r\n                c = data[i + 1] - sampleColor[1]; // check by green\r\n                if (c > colorThreshold || c < -colorThreshold) continue;\r\n                c = data[i + 2] - sampleColor[2]; // check by blue\r\n                if (c > colorThreshold || c < -colorThreshold) continue;\r\n\r\n                checkY = true; // if the color of the new point(x,y) is similar to the sample color need to check minmax for Y \r\n\r\n                result[dy + x] = 1; // mark a new point in mask\r\n                visited[dy + x] = 1; // mark a new point as visited\r\n\r\n                xl = x - 1;\r\n                // walk to left side starting with the left neighbor\r\n                while (xl > -1) {\r\n                    dyl = dy + xl;\r\n                    i = dyl * bytes; // point index in the image data\r\n                    if (visited[dyl] === 1) break; // check whether the point has been visited\r\n                    // compare the color of the sample\r\n                    c = data[i] - sampleColor[0]; // check by red\r\n                    if (c > colorThreshold || c < -colorThreshold) break;\r\n                    c = data[i + 1] - sampleColor[1]; // check by green\r\n                    if (c > colorThreshold || c < -colorThreshold) break;\r\n                    c = data[i + 2] - sampleColor[2]; // check by blue\r\n                    if (c > colorThreshold || c < -colorThreshold) break;\r\n\r\n                    result[dyl] = 1;\r\n                    visited[dyl] = 1;\r\n\r\n                    xl--;\r\n                }\r\n                xr = x + 1;\r\n                // walk to right side starting with the right neighbor\r\n                while (xr < w) {\r\n                    dyr = dy + xr;\r\n                    i = dyr * bytes; // index point in the image data\r\n                    if (visited[dyr] === 1) break; // check whether the point has been visited\r\n                    // compare the color of the sample\r\n                    c = data[i] - sampleColor[0]; // check by red\r\n                    if (c > colorThreshold || c < -colorThreshold) break;\r\n                    c = data[i + 1] - sampleColor[1]; // check by green\r\n                    if (c > colorThreshold || c < -colorThreshold) break;\r\n                    c = data[i + 2] - sampleColor[2]; // check by blue\r\n                    if (c > colorThreshold || c < -colorThreshold) break;\r\n\r\n                    result[dyr] = 1;\r\n                    visited[dyr] = 1;\r\n\r\n                    xr++;\r\n                }\r\n\r\n                // check minmax for X\r\n                if (xl < minX) minX = xl + 1;\r\n                if (xr > maxX) maxX = xr - 1;\r\n\r\n                newY = el.y - el.dir;\r\n                if (newY >= 0 && newY < h) { // add two scanning lines in the opposite direction (y - dir) if necessary\r\n                    if (xl < el.left) stack.push({ y: newY, left: xl, right: el.left, dir: -el.dir }); // from \"new left\" to \"current left\"\r\n                    if (el.right < xr) stack.push({ y: newY, left: el.right, right: xr, dir: -el.dir }); // from \"current right\" to \"new right\"\r\n                }\r\n                newY = el.y + el.dir;\r\n                if (newY >= 0 && newY < h) { // add the scanning line in the direction (y + dir) if necessary\r\n                    if (xl < xr) stack.push({ y: newY, left: xl, right: xr, dir: el.dir }); // from \"new left\" to \"new right\"\r\n                }\r\n            }\r\n            // check minmax for Y if necessary\r\n            if (checkY) {\r\n                if (el.y < minY) minY = el.y;\r\n                if (el.y > maxY) maxY = el.y;\r\n            }\r\n        } while (stack.length > 0);\r\n\r\n        return {\r\n            data: result,\r\n            width: image.width,\r\n            height: image.height,\r\n            bounds: {\r\n                minX: minX,\r\n                minY: minY,\r\n                maxX: maxX,\r\n                maxY: maxY\r\n            }\r\n        };\r\n    }\r\n    function floodFillWithBorders(image, px, py, colorThreshold, mask) {\r\n\r\n        var c, x, newY, el, xr, xl, dy, dyl, dyr, checkY,\r\n            data = image.data,\r\n            w = image.width,\r\n            h = image.height,\r\n            bytes = image.bytes, // number of bytes in the color\r\n            maxX = -1, minX = w + 1, maxY = -1, minY = h + 1,\r\n            i = py * w + px, // start point index in the mask data\r\n            result = new Uint8Array(w * h), // result mask\r\n            visited = new Uint8Array(mask ? mask : w * h); // mask of visited points\r\n\r\n        if (visited[i] === 1) return null;\r\n\r\n        i = i * bytes; // start point index in the image data\r\n        var sampleColor = [data[i], data[i + 1], data[i + 2], data[i + 3]]; // start point color (sample)\r\n\r\n        var stack = [{ y: py, left: px - 1, right: px + 1, dir: 1 }]; // first scanning line\r\n        do {\r\n            el = stack.shift(); // get line for scanning\r\n\r\n            checkY = false;\r\n            for (x = el.left + 1; x < el.right; x++) {\r\n                dy = el.y * w;\r\n                i = (dy + x) * bytes; // point index in the image data\r\n\r\n                if (visited[dy + x] === 1) continue; // check whether the point has been visited\r\n\r\n                checkY = true; // if the color of the new point(x,y) is similar to the sample color need to check minmax for Y \r\n\r\n                result[dy + x] = 1; // mark a new point in mask\r\n                visited[dy + x] = 1; // mark a new point as visited\r\n\r\n                // compare the color of the sample\r\n                c = data[i] - sampleColor[0]; // check by red\r\n                if (c > colorThreshold || c < -colorThreshold) continue;\r\n                c = data[i + 1] - sampleColor[1]; // check by green\r\n                if (c > colorThreshold || c < -colorThreshold) continue;\r\n                c = data[i + 2] - sampleColor[2]; // check by blue\r\n                if (c > colorThreshold || c < -colorThreshold) continue;\r\n\r\n                xl = x - 1;\r\n                // walk to left side starting with the left neighbor\r\n                while (xl > -1) {\r\n                    dyl = dy + xl;\r\n                    i = dyl * bytes; // point index in the image data\r\n                    if (visited[dyl] === 1) break; // check whether the point has been visited\r\n\r\n                    result[dyl] = 1;\r\n                    visited[dyl] = 1;\r\n                    xl--;\r\n\r\n                    // compare the color of the sample\r\n                    c = data[i] - sampleColor[0]; // check by red\r\n                    if (c > colorThreshold || c < -colorThreshold) break;\r\n                    c = data[i + 1] - sampleColor[1]; // check by green\r\n                    if (c > colorThreshold || c < -colorThreshold) break;\r\n                    c = data[i + 2] - sampleColor[2]; // check by blue\r\n                    if (c > colorThreshold || c < -colorThreshold) break;\r\n                }\r\n                xr = x + 1;\r\n                // walk to right side starting with the right neighbor\r\n                while (xr < w) {\r\n                    dyr = dy + xr;\r\n                    i = dyr * bytes; // index point in the image data\r\n                    if (visited[dyr] === 1) break; // check whether the point has been visited\r\n\r\n                    result[dyr] = 1;\r\n                    visited[dyr] = 1;\r\n                    xr++;\r\n\r\n                    // compare the color of the sample\r\n                    c = data[i] - sampleColor[0]; // check by red\r\n                    if (c > colorThreshold || c < -colorThreshold) break;\r\n                    c = data[i + 1] - sampleColor[1]; // check by green\r\n                    if (c > colorThreshold || c < -colorThreshold) break;\r\n                    c = data[i + 2] - sampleColor[2]; // check by blue\r\n                    if (c > colorThreshold || c < -colorThreshold) break;\r\n                }\r\n\r\n                // check minmax for X\r\n                if (xl < minX) minX = xl + 1;\r\n                if (xr > maxX) maxX = xr - 1;\r\n\r\n                newY = el.y - el.dir;\r\n                if (newY >= 0 && newY < h) { // add two scanning lines in the opposite direction (y - dir) if necessary\r\n                    if (xl < el.left) stack.push({ y: newY, left: xl, right: el.left, dir: -el.dir }); // from \"new left\" to \"current left\"\r\n                    if (el.right < xr) stack.push({ y: newY, left: el.right, right: xr, dir: -el.dir }); // from \"current right\" to \"new right\"\r\n                }\r\n                newY = el.y + el.dir;\r\n                if (newY >= 0 && newY < h) { // add the scanning line in the direction (y + dir) if necessary\r\n                    if (xl < xr) stack.push({ y: newY, left: xl, right: xr, dir: el.dir }); // from \"new left\" to \"new right\"\r\n                }\r\n            }\r\n            // check minmax for Y if necessary\r\n            if (checkY) {\r\n                if (el.y < minY) minY = el.y;\r\n                if (el.y > maxY) maxY = el.y;\r\n            }\r\n        } while (stack.length > 0);\r\n\r\n        return {\r\n            data: result,\r\n            width: image.width,\r\n            height: image.height,\r\n            bounds: {\r\n                minX: minX,\r\n                minY: minY,\r\n                maxX: maxX,\r\n                maxY: maxY\r\n            }\r\n        };\r\n    }\r\n    /** Apply the gauss-blur filter to binary mask\r\n      * Algorithms: http://blog.ivank.net/fastest-gaussian-blur.html\r\n      * http://www.librow.com/articles/article-9\r\n      * http://elynxsdk.free.fr/ext-docs/Blur/Fast_box_blur.pdf\r\n      * @param {Object} mask: {Uint8Array} data, {int} width, {int} height, {Object} bounds\r\n      * @param {int} blur radius\r\n      * @return {Object} mask: {Uint8Array} data, {int} width, {int} height, {Object} bounds\r\n      */\r\n    lib.gaussBlur = function(mask, radius) {\r\n\r\n        var i, k, k1, x, y, val, start, end,\r\n            n = radius * 2 + 1, // size of the pattern for radius-neighbors (from -r to +r with the center point)\r\n            s2 = radius * radius,\r\n            wg = new Float32Array(n), // weights\r\n            total = 0, // sum of weights(used for normalization)\r\n            w = mask.width,\r\n            h = mask.height,\r\n            data = mask.data,\r\n            minX = mask.bounds.minX,\r\n            maxX = mask.bounds.maxX,\r\n            minY = mask.bounds.minY,\r\n            maxY = mask.bounds.maxY;\r\n\r\n        // calc gauss weights\r\n        for (i = 0; i < radius; i++) {\r\n            var dsq = (radius - i) * (radius - i);\r\n            var ww = Math.exp(-dsq / (2.0 * s2)) / (2 * Math.PI * s2);\r\n            wg[radius + i] = wg[radius - i] = ww;\r\n            total += 2 * ww;\r\n        }\r\n        // normalization weights\r\n        for (i = 0; i < n; i++) {\r\n            wg[i] /= total;\r\n        }\r\n\r\n        var result = new Uint8Array(w * h), // result mask\r\n            endX = radius + w,\r\n            endY = radius + h;\r\n\r\n        //walk through all source points for blur\r\n        for (y = minY; y < maxY + 1; y++)\r\n            for (x = minX; x < maxX + 1; x++) {\r\n                val = 0;\r\n                k = y * w + x; // index of the point\r\n                start = radius - x > 0 ? radius - x : 0;\r\n                end = endX - x < n ? endX - x : n; // Math.min((((w - 1) - x) + radius) + 1, n);\r\n                k1 = k - radius;\r\n                // walk through x-neighbors\r\n                for (i = start; i < end; i++) {\r\n                    val += data[k1 + i] * wg[i];\r\n                }\r\n                start = radius - y > 0 ? radius - y : 0;\r\n                end = endY - y < n ? endY - y : n; // Math.min((((h - 1) - y) + radius) + 1, n);\r\n                k1 = k - radius * w;\r\n                // walk through y-neighbors\r\n                for (i = start; i < end; i++) {\r\n                    val += data[k1 + i * w] * wg[i];\r\n                }\r\n                result[k] = val > 0.5 ? 1 : 0;\r\n            }\r\n\r\n        return {\r\n            data: result,\r\n            width: w,\r\n            height: h,\r\n            bounds: {\r\n                minX: minX,\r\n                minY: minY,\r\n                maxX: maxX,\r\n                maxY: maxY\r\n            }\r\n        };\r\n    };\r\n\r\n    /** Create a border index array of boundary points of the mask with radius-neighbors\r\n      * @param {Object} mask: {Uint8Array} data, {int} width, {int} height, {Object} bounds\r\n      * @param {int} blur radius\r\n      * @param {Uint8Array} visited: mask of visited points (optional) \r\n      * @return {Array} border index array of boundary points with radius-neighbors (only points need for blur)\r\n      */\r\n    function createBorderForBlur(mask, radius, visited) {\r\n\r\n        var x, i, j, y, k, k1, k2,\r\n            w = mask.width,\r\n            h = mask.height,\r\n            data = mask.data,\r\n            visitedData = new Uint8Array(data),\r\n            minX = mask.bounds.minX,\r\n            maxX = mask.bounds.maxX,\r\n            minY = mask.bounds.minY,\r\n            maxY = mask.bounds.maxY,\r\n            len = w * h,\r\n            temp = new Uint8Array(len), // auxiliary array to check uniqueness\r\n            border = [], // only border points\r\n            x0 = Math.max(minX, 1),\r\n            x1 = Math.min(maxX, w - 2),\r\n            y0 = Math.max(minY, 1),\r\n            y1 = Math.min(maxY, h - 2);\r\n\r\n        if (visited && visited.length > 0) {\r\n            // copy visited points (only \"black\")\r\n            for (k = 0; k < len; k++) {\r\n                if (visited[k] === 1) visitedData[k] = 1;\r\n            }\r\n        }\r\n\r\n        // walk through inner values except points on the boundary of the image\r\n        for (y = y0; y < y1 + 1; y++)\r\n            for (x = x0; x < x1 + 1; x++) {\r\n                k = y * w + x;\r\n                if (data[k] === 0) continue; // \"white\" point isn't the border\r\n                k1 = k + w; // y + 1\r\n                k2 = k - w; // y - 1\r\n                // check if any neighbor with a \"white\" color\r\n                if (visitedData[k + 1] === 0 || visitedData[k - 1] === 0 ||\r\n                    visitedData[k1] === 0 || visitedData[k1 + 1] === 0 || visitedData[k1 - 1] === 0 ||\r\n                    visitedData[k2] === 0 || visitedData[k2 + 1] === 0 || visitedData[k2 - 1] === 0) {\r\n                    //if (visitedData[k + 1] + visitedData[k - 1] + \r\n                    //    visitedData[k1] + visitedData[k1 + 1] + visitedData[k1 - 1] +\r\n                    //    visitedData[k2] + visitedData[k2 + 1] + visitedData[k2 - 1] == 8) continue;\r\n                    border.push(k);\r\n                }\r\n            }\r\n\r\n        // walk through points on the boundary of the image if necessary\r\n        // if the \"black\" point is adjacent to the boundary of the image, it is a border point\r\n        if (minX == 0)\r\n            for (y = minY; y < maxY + 1; y++)\r\n                if (data[y * w] === 1)\r\n                    border.push(y * w);\r\n\r\n        if (maxX == w - 1)\r\n            for (y = minY; y < maxY + 1; y++)\r\n                if (data[y * w + maxX] === 1)\r\n                    border.push(y * w + maxX);\r\n\r\n        if (minY == 0)\r\n            for (x = minX; x < maxX + 1; x++)\r\n                if (data[x] === 1)\r\n                    border.push(x);\r\n\r\n        if (maxY == h - 1)\r\n            for (x = minX; x < maxX + 1; x++)\r\n                if (data[maxY * w + x] === 1)\r\n                    border.push(maxY * w + x);\r\n\r\n        var result = [], // border points with radius-neighbors\r\n            start, end,\r\n            endX = radius + w,\r\n            endY = radius + h,\r\n            n = radius * 2 + 1; // size of the pattern for radius-neighbors (from -r to +r with the center point)\r\n\r\n        len = border.length;\r\n        // walk through radius-neighbors of border points and add them to the result array\r\n        for (j = 0; j < len; j++) {\r\n            k = border[j]; // index of the border point\r\n            temp[k] = 1; // mark border point\r\n            result.push(k); // save the border point\r\n            x = k % w; // calc x by index\r\n            y = (k - x) / w; // calc y by index\r\n            start = radius - x > 0 ? radius - x : 0;\r\n            end = endX - x < n ? endX - x : n; // Math.min((((w - 1) - x) + radius) + 1, n);\r\n            k1 = k - radius;\r\n            // walk through x-neighbors\r\n            for (i = start; i < end; i++) {\r\n                k2 = k1 + i;\r\n                if (temp[k2] === 0) { // check the uniqueness\r\n                    temp[k2] = 1;\r\n                    result.push(k2);\r\n                }\r\n            }\r\n            start = radius - y > 0 ? radius - y : 0;\r\n            end = endY - y < n ? endY - y : n; // Math.min((((h - 1) - y) + radius) + 1, n);\r\n            k1 = k - radius * w;\r\n            // walk through y-neighbors\r\n            for (i = start; i < end; i++) {\r\n                k2 = k1 + i * w;\r\n                if (temp[k2] === 0) { // check the uniqueness\r\n                    temp[k2] = 1;\r\n                    result.push(k2);\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n    /** Apply the gauss-blur filter ONLY to border points with radius-neighbors\r\n      * Algorithms: http://blog.ivank.net/fastest-gaussian-blur.html\r\n      * http://www.librow.com/articles/article-9\r\n      * http://elynxsdk.free.fr/ext-docs/Blur/Fast_box_blur.pdf\r\n      * @param {Object} mask: {Uint8Array} data, {int} width, {int} height, {Object} bounds\r\n      * @param {int} blur radius\r\n      * @param {Uint8Array} visited: mask of visited points (optional) \r\n      * @return {Object} mask: {Uint8Array} data, {int} width, {int} height, {Object} bounds\r\n      */\r\n    lib.gaussBlurOnlyBorder = function(mask, radius, visited) {\r\n\r\n        var border = createBorderForBlur(mask, radius, visited), // get border points with radius-neighbors\r\n            ww, dsq, i, j, k, k1, x, y, val, start, end,\r\n            n = radius * 2 + 1, // size of the pattern for radius-neighbors (from -r to +r with center point)\r\n            s2 = 2 * radius * radius,\r\n            wg = new Float32Array(n), // weights\r\n            total = 0, // sum of weights(used for normalization)\r\n            w = mask.width,\r\n            h = mask.height,\r\n            data = mask.data,\r\n            minX = mask.bounds.minX,\r\n            maxX = mask.bounds.maxX,\r\n            minY = mask.bounds.minY,\r\n            maxY = mask.bounds.maxY,\r\n            len = border.length;\r\n\r\n        // calc gauss weights\r\n        for (i = 0; i < radius; i++) {\r\n            dsq = (radius - i) * (radius - i);\r\n            ww = Math.exp(-dsq / s2) / Math.PI;\r\n            wg[radius + i] = wg[radius - i] = ww;\r\n            total += 2 * ww;\r\n        }\r\n        // normalization weights\r\n        for (i = 0; i < n; i++) {\r\n            wg[i] /= total;\r\n        }\r\n\r\n        var result = new Uint8Array(data), // copy the source mask\r\n            endX = radius + w,\r\n            endY = radius + h;\r\n\r\n        //walk through all border points for blur\r\n        for (i = 0; i < len; i++) {\r\n            k = border[i]; // index of the border point\r\n            val = 0;\r\n            x = k % w; // calc x by index\r\n            y = (k - x) / w; // calc y by index\r\n            start = radius - x > 0 ? radius - x : 0;\r\n            end = endX - x < n ? endX - x : n; // Math.min((((w - 1) - x) + radius) + 1, n);\r\n            k1 = k - radius;\r\n            // walk through x-neighbors\r\n            for (j = start; j < end; j++) {\r\n                val += data[k1 + j] * wg[j];\r\n            }\r\n            if (val > 0.5) {\r\n                result[k] = 1;\r\n                // check minmax\r\n                if (x < minX) minX = x;\r\n                if (x > maxX) maxX = x;\r\n                if (y < minY) minY = y;\r\n                if (y > maxY) maxY = y;\r\n                continue;\r\n            }\r\n            start = radius - y > 0 ? radius - y : 0;\r\n            end = endY - y < n ? endY - y : n; // Math.min((((h - 1) - y) + radius) + 1, n);\r\n            k1 = k - radius * w;\r\n            // walk through y-neighbors\r\n            for (j = start; j < end; j++) {\r\n                val += data[k1 + j * w] * wg[j];\r\n            }\r\n            if (val > 0.5) {\r\n                result[k] = 1;\r\n                // check minmax\r\n                if (x < minX) minX = x;\r\n                if (x > maxX) maxX = x;\r\n                if (y < minY) minY = y;\r\n                if (y > maxY) maxY = y;\r\n            } else {\r\n                result[k] = 0;\r\n            }\r\n        }\r\n\r\n        return {\r\n            data: result,\r\n            width: w,\r\n            height: h,\r\n            bounds: {\r\n                minX: minX,\r\n                minY: minY,\r\n                maxX: maxX,\r\n                maxY: maxY\r\n            }\r\n        };\r\n    };\r\n\r\n    /** Create a border mask (only boundary points)\r\n      * @param {Object} mask: {Uint8Array} data, {int} width, {int} height, {Object} bounds\r\n      * @return {Object} border mask: {Uint8Array} data, {int} width, {int} height, {Object} offset\r\n      */\r\n    lib.createBorderMask = function(mask) {\r\n\r\n        var x, y, k, k1, k2,\r\n            w = mask.width,\r\n            h = mask.height,\r\n            data = mask.data,\r\n            minX = mask.bounds.minX,\r\n            maxX = mask.bounds.maxX,\r\n            minY = mask.bounds.minY,\r\n            maxY = mask.bounds.maxY,\r\n            rw = maxX - minX + 1, // bounds size\r\n            rh = maxY - minY + 1,\r\n            result = new Uint8Array(rw * rh), // reduced mask (bounds size)\r\n            x0 = Math.max(minX, 1),\r\n            x1 = Math.min(maxX, w - 2),\r\n            y0 = Math.max(minY, 1),\r\n            y1 = Math.min(maxY, h - 2);\r\n\r\n        // walk through inner values except points on the boundary of the image\r\n        for (y = y0; y < y1 + 1; y++)\r\n            for (x = x0; x < x1 + 1; x++) {\r\n                k = y * w + x;\r\n                if (data[k] === 0) continue; // \"white\" point isn't the border\r\n                k1 = k + w; // y + 1\r\n                k2 = k - w; // y - 1\r\n                // check if any neighbor with a \"white\" color\r\n                if (data[k + 1] === 0 || data[k - 1] === 0 ||\r\n                    data[k1] === 0 || data[k1 + 1] === 0 || data[k1 - 1] === 0 ||\r\n                    data[k2] === 0 || data[k2 + 1] === 0 || data[k2 - 1] === 0) {\r\n                    //if (data[k + 1] + data[k - 1] + \r\n                    //    data[k1] + data[k1 + 1] + data[k1 - 1] +\r\n                    //    data[k2] + data[k2 + 1] + data[k2 - 1] == 8) continue;\r\n                    result[(y - minY) * rw + (x - minX)] = 1;\r\n                }\r\n            }\r\n\r\n        // walk through points on the boundary of the image if necessary\r\n        // if the \"black\" point is adjacent to the boundary of the image, it is a border point\r\n        if (minX == 0)\r\n            for (y = minY; y < maxY + 1; y++)\r\n                if (data[y * w] === 1)\r\n                    result[(y - minY) * rw] = 1;\r\n\r\n        if (maxX == w - 1)\r\n            for (y = minY; y < maxY + 1; y++)\r\n                if (data[y * w + maxX] === 1)\r\n                    result[(y - minY) * rw + (maxX - minX)] = 1;\r\n\r\n        if (minY == 0)\r\n            for (x = minX; x < maxX + 1; x++)\r\n                if (data[x] === 1)\r\n                    result[x - minX] = 1;\r\n\r\n        if (maxY == h - 1)\r\n            for (x = minX; x < maxX + 1; x++)\r\n                if (data[maxY * w + x] === 1)\r\n                    result[(maxY - minY) * rw + (x - minX)] = 1;\r\n\r\n        return {\r\n            data: result,\r\n            width: rw,\r\n            height: rh,\r\n            offset: { x: minX, y: minY }\r\n        };\r\n    };\r\n    \r\n    /** Create a border index array of boundary points of the mask\r\n      * @param {Object} mask: {Uint8Array} data, {int} width, {int} height\r\n      * @return {Array} border index array boundary points of the mask\r\n      */\r\n    lib.getBorderIndices = function(mask) {\r\n\r\n        var x, y, k, k1, k2,\r\n            w = mask.width,\r\n            h = mask.height,\r\n            data = mask.data,\r\n            border = [], // only border points\r\n            x1 = w - 1,\r\n            y1 = h - 1;\r\n\r\n        // walk through inner values except points on the boundary of the image\r\n        for (y = 1; y < y1; y++)\r\n            for (x = 1; x < x1; x++) {\r\n                k = y * w + x;\r\n                if (data[k] === 0) continue; // \"white\" point isn't the border\r\n                k1 = k + w; // y + 1\r\n                k2 = k - w; // y - 1\r\n                // check if any neighbor with a \"white\" color\r\n                if (data[k + 1] === 0 || data[k - 1] === 0 ||\r\n                    data[k1] === 0 || data[k1 + 1] === 0 || data[k1 - 1] === 0 ||\r\n                    data[k2] === 0 || data[k2 + 1] === 0 || data[k2 - 1] === 0) {\r\n                    //if (data[k + 1] + data[k - 1] + \r\n                    //    data[k1] + data[k1 + 1] + data[k1 - 1] +\r\n                    //    data[k2] + data[k2 + 1] + data[k2 - 1] == 8) continue;\r\n                    border.push(k);\r\n                }\r\n            }\r\n\r\n        // walk through points on the boundary of the image if necessary\r\n        // if the \"black\" point is adjacent to the boundary of the image, it is a border point\r\n        for (y = 0; y < h; y++)\r\n            if (data[y * w] === 1)\r\n                border.push(y * w);\r\n\r\n        for (x = 0; x < w; x++)\r\n            if (data[x] === 1)\r\n                border.push(x);\r\n\r\n        k = w - 1;\r\n        for (y = 0; y < h; y++)\r\n            if (data[y * w + k] === 1)\r\n                border.push(y * w + k);\r\n\r\n        k = (h - 1) * w;\r\n        for (x = 0; x < w; x++)\r\n            if (data[k + x] === 1)\r\n                border.push(k + x);\r\n\r\n        return border;\r\n    };\r\n    \r\n    /** Create a compressed mask with a \"white\" border (1px border with zero values) for the contour tracing\r\n      * @param {Object} mask: {Uint8Array} data, {int} width, {int} height, {Object} bounds\r\n      * @return {Object} border mask: {Uint8Array} data, {int} width, {int} height, {Object} offset\r\n      */\r\n    function prepareMask(mask) {\r\n        var x, y,\r\n            w = mask.width,\r\n            data = mask.data,\r\n            minX = mask.bounds.minX,\r\n            maxX = mask.bounds.maxX,\r\n            minY = mask.bounds.minY,\r\n            maxY = mask.bounds.maxY,\r\n            rw = maxX - minX + 3, // bounds size +1 px on each side (a \"white\" border)\r\n            rh = maxY - minY + 3,\r\n            result = new Uint8Array(rw * rh); // reduced mask (bounds size)\r\n\r\n        // walk through inner values and copy only \"black\" points to the result mask\r\n        for (y = minY; y < maxY + 1; y++)\r\n            for (x = minX; x < maxX + 1; x++) {\r\n                if (data[y * w + x] === 1)\r\n                    result[(y - minY + 1) * rw + (x - minX + 1)] = 1;\r\n            }\r\n\r\n        return {\r\n            data: result,\r\n            width: rw,\r\n            height: rh,\r\n            offset: { x: minX - 1, y: minY - 1 }\r\n        };\r\n    }        \r\n    /** Create a contour array for the binary mask\r\n      * Algorithm: http://www.sciencedirect.com/science/article/pii/S1077314203001401\r\n      * @param {Object} mask: {Uint8Array} data, {int} width, {int} height, {Object} bounds\r\n      * @return {Array} contours: {Array} points, {bool} inner, {int} label\r\n      */\r\n    lib.traceContours = function(mask) {\r\n        var m = prepareMask(mask),\r\n            contours = [],\r\n            label = 0,\r\n            w = m.width,\r\n            w2 = w * 2,\r\n            h = m.height,\r\n            src = m.data,\r\n            dx = m.offset.x,\r\n            dy = m.offset.y,\r\n            dest = new Uint8Array(src), // label matrix\r\n            i, j, x, y, k, k1, c, inner, dir, first, second, current, previous, next, d;\r\n\r\n        // all [dx,dy] pairs (array index is the direction)\r\n        // 5 6 7\r\n        // 4 X 0\r\n        // 3 2 1\r\n        var directions = [[1, 0], [1, 1], [0, 1], [-1, 1], [-1, 0], [-1, -1], [0, -1], [1, -1]];\r\n\r\n        for (y = 1; y < h - 1; y++)\r\n            for (x = 1; x < w - 1; x++) {\r\n                k = y * w + x;\r\n                if (src[k] === 1) {\r\n                    for (i = -w; i < w2; i += w2) { // k - w: outer tracing (y - 1), k + w: inner tracing (y + 1)\r\n                        if (src[k + i] === 0 && dest[k + i] === 0) { // need contour tracing\r\n                            inner = i === w; // is inner contour tracing ?\r\n                            label++; // label for the next contour\r\n\r\n                            c = [];\r\n                            dir = inner ? 2 : 6; // start direction\r\n                            current = previous = first = { x: x, y: y };\r\n                            second = null;\r\n                            while (true) {\r\n                                dest[current.y * w + current.x] = label; // mark label for the current point \r\n                                // bypass all the neighbors around the current point in a clockwise\r\n                                for (j = 0; j < 8; j++) {\r\n                                    dir = (dir + 1) % 8;\r\n\r\n                                    // get the next point by new direction\r\n                                    d = directions[dir]; // index as direction\r\n                                    next = { x: current.x + d[0], y: current.y + d[1] };\r\n\r\n                                    k1 = next.y * w + next.x;\r\n                                    if (src[k1] === 1) // black boundary pixel\r\n                                    {\r\n                                        dest[k1] = label; // mark a label\r\n                                        break;\r\n                                    }\r\n                                    dest[k1] = -1; // mark a white boundary pixel\r\n                                    next = null;\r\n                                }\r\n                                if (next === null) break; // no neighbours (one-point contour)\r\n                                current = next;\r\n                                if (second) {\r\n                                    if (previous.x === first.x && previous.y === first.y && current.x === second.x && current.y === second.y) {\r\n                                        break; // creating the contour completed when returned to original position\r\n                                    }\r\n                                } else {\r\n                                    second = next;\r\n                                }\r\n                                c.push({ x: previous.x + dx, y: previous.y + dy });\r\n                                previous = current;\r\n                                dir = (dir + 4) % 8; // next dir (symmetrically to the current direction)\r\n                            }\r\n\r\n                            if (next != null) {\r\n                                c.push({ x: first.x + dx, y: first.y + dy }); // close the contour\r\n                                contours.push({ inner: inner, label: label, points: c }); // add contour to the list\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        return contours;\r\n    };\r\n    \r\n    /** Simplify contours\r\n      * Algorithms: http://psimpl.sourceforge.net/douglas-peucker.html \r\n      * http://neerc.ifmo.ru/wiki/index.php?title=%D0%A3%D0%BF%D1%80%D0%BE%D1%89%D0%B5%D0%BD%D0%B8%D0%B5_%D0%BF%D0%BE%D0%BB%D0%B8%D0%B3%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B9_%D1%86%D0%B5%D0%BF%D0%B8\r\n      * @param {Array} contours: {Array} points, {bool} inner, {int} label\r\n      * @param {float} simplify tolerant\r\n      * @param {int} simplify count: min number of points when the contour is simplified\r\n      * @return {Array} contours: {Array} points, {bool} inner, {int} label, {int} initialCount\r\n      */\r\n    lib.simplifyContours = function(contours, simplifyTolerant, simplifyCount) {\r\n        var lenContours = contours.length,\r\n            result = [],\r\n            i, j, k, c, points, len, resPoints, lst, stack, ids,\r\n            maxd, maxi, dist, r1, r2, r12, dx, dy, pi, pf, pl;\r\n\r\n        // walk through all contours \r\n        for (j = 0; j < lenContours; j++) {\r\n            c = contours[j];\r\n            points = c.points;\r\n            len = c.points.length;\r\n\r\n            if (len < simplifyCount) { // contour isn't simplified\r\n                resPoints = [];\r\n                for (k = 0; k < len; k++) {\r\n                    resPoints.push({ x: points[k].x, y: points[k].y });\r\n                }\r\n                result.push({ inner: c.inner, label: c.label, points: resPoints, initialCount: len });\r\n                continue;\r\n            }\r\n\r\n            lst = [0, len - 1]; // always add first and last points\r\n            stack = [{ first: 0, last: len - 1 }]; // first processed edge\r\n\r\n            do {\r\n                ids = stack.shift();\r\n                if (ids.last <= ids.first + 1) // no intermediate points\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                maxd = -1.0; // max distance from point to current edge\r\n                maxi = ids.first; // index of maximally distant point\r\n\r\n                for (i = ids.first + 1; i < ids.last; i++) // bypass intermediate points in edge\r\n                {\r\n                    // calc the distance from current point to edge\r\n                    pi = points[i];\r\n                    pf = points[ids.first];\r\n                    pl = points[ids.last];\r\n                    dx = pi.x - pf.x;\r\n                    dy = pi.y - pf.y;\r\n                    r1 = Math.sqrt(dx * dx + dy * dy);\r\n                    dx = pi.x - pl.x;\r\n                    dy = pi.y - pl.y;\r\n                    r2 = Math.sqrt(dx * dx + dy * dy);\r\n                    dx = pf.x - pl.x;\r\n                    dy = pf.y - pl.y;\r\n                    r12 = Math.sqrt(dx * dx + dy * dy);\r\n                    if (r1 >= Math.sqrt(r2 * r2 + r12 * r12)) dist = r2;\r\n                    else if (r2 >= Math.sqrt(r1 * r1 + r12 * r12)) dist = r1;\r\n                    else dist = Math.abs((dy * pi.x - dx * pi.y + pf.x * pl.y - pl.x * pf.y) / r12);\r\n\r\n                    if (dist > maxd) {\r\n                        maxi = i; // save the index of maximally distant point\r\n                        maxd = dist;\r\n                    }\r\n                }\r\n\r\n                if (maxd > simplifyTolerant) // if the max \"deviation\" is larger than allowed then...\r\n                {\r\n                    lst.push(maxi); // add index to the simplified list\r\n                    stack.push({ first: ids.first, last: maxi }); // add the left part for processing\r\n                    stack.push({ first: maxi, last: ids.last }); // add the right part for processing\r\n                }\r\n\r\n            } while (stack.length > 0);\r\n\r\n            resPoints = [];\r\n            len = lst.length;\r\n            lst.sort(function(a, b) { return a - b; }); // restore index order\r\n            for (k = 0; k < len; k++) {\r\n                resPoints.push({ x: points[lst[k]].x, y: points[lst[k]].y }); // add result points to the correct order\r\n            }\r\n            result.push({ inner: c.inner, label: c.label, points: resPoints, initialCount: c.points.length });\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    export default lib;\r\n//# sourceMappingURL=magic-wand.js.map\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { StoreModule } from '@ngrx/store';\nimport { AppCommonModule } from '../common/common.module';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport 'paper';\n\nimport {\n    MandalaEditorComponent, MandalaEditorCanvasComponent, MandalaEditorColorpickerComponent, MandalaEditorToolsComponent,\n    MandalaEditorExportSvgComponent\n} from './components';\nimport { MandalaDrawZonesDirective } from './directives';\nimport { UndoService, EditorService, ToolService, CanvasService, IdbService } from './services';\n\nimport * as editor from './store/reducers/editor.reducer';\nimport { EffectsModule } from '@ngrx/effects';\nimport { EditorEffects } from './store/effects/editor.effects';\nimport { HttpClientModule } from '@angular/common/http';\n\n\n@NgModule({\n    entryComponents: [\n        MandalaEditorExportSvgComponent\n    ],\n    declarations: [\n        MandalaEditorComponent,\n        MandalaEditorCanvasComponent,\n        MandalaEditorColorpickerComponent,\n        MandalaEditorToolsComponent,\n        MandalaEditorExportSvgComponent,\n        MandalaDrawZonesDirective\n    ],\n    imports: [\n        CommonModule,\n        HttpClientModule,\n        MatButtonModule,\n        MatCheckboxModule,\n        MatSliderModule,\n        MatIconModule,\n        MatTooltipModule,\n        MatProgressSpinnerModule,\n        MatDialogModule,\n        MatSelectModule,\n        AppCommonModule,\n        FormsModule,\n        StoreModule.forFeature('mandala', {\n            editor: editor.reducer,\n        }),\n        EffectsModule.forFeature([EditorEffects]),\n    ],\n    exports: [\n        MandalaEditorComponent\n    ],\n    providers: [\n        UndoService,\n        EditorService,\n        ToolService,\n        CanvasService,\n        IdbService\n    ]\n})\nexport class MandalaModule {\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as paper from 'paper';\n\nexport interface CanvasSize {\n    width: number;\n    height: number;\n}\n\nexport interface CanvasPoint {\n    x: number;\n    y: number;\n}\n\n@Injectable()\nexport class CanvasService {\n    private size: CanvasSize;\n    private drawElement: HTMLCanvasElement;\n    private fillElement: HTMLCanvasElement;\n    private cachedCanvasRect: ClientRect;\n    private exportPaperGroups = new Map<string, any>();\n    private cachedPaperGroups = new Map<string, any>();\n    private cachedPaperRasterizedGroups = new Map<any, any>();\n    fillProject: paper.Project;\n    zonesProject: paper.Project;\n    drawProject: paper.Project;\n    backgroundRect: paper.Path.Rectangle;\n\n    clear() {\n        this.cachedPaperGroups.clear();\n        this.cachedPaperRasterizedGroups.clear();\n        this.exportPaperGroups.clear();\n        this.fillProject.remove();\n        this.drawProject.remove();\n        this.zonesProject.remove();\n        this.size = null;\n        this.drawElement = null;\n        this.fillElement = null;\n        this.cachedCanvasRect = null;\n        this.fillProject = null;\n        this.drawProject = null;\n        this.zonesProject = null;\n    }\n\n    setZonesElement(zonesElement: HTMLCanvasElement) {\n        this.zonesProject = new paper.Project(zonesElement);\n        this.zonesProject.view.autoUpdate = false;\n    }\n\n\n    setDrawElement(drawElement: HTMLCanvasElement) {\n        this.drawElement = drawElement;\n        this.drawProject = new paper.Project(drawElement);\n        this.drawProject.view.autoUpdate = false;\n\n        this.addBackgroundRect('white');\n        this.drawProject.view.update();\n    }\n\n    getDrawElement() {\n        return this.drawElement;\n    }\n\n\n    setFillElement(fillElement: HTMLCanvasElement) {\n        this.fillElement = fillElement;\n        this.fillProject = new paper.Project(fillElement);\n        this.fillProject.view.autoUpdate = false;\n    }\n\n    getFillElement() {\n        return this.fillElement;\n    }\n\n\n    getCanvasSize(): CanvasSize {\n        return this.size;\n    }\n\n    updateCanvasesSize(size: CanvasSize) {\n        this.size = size;\n        if (size) {\n            const canvases = [this.fillProject, this.drawProject, this.zonesProject];\n            canvases.forEach((project) => {\n                if (project) {\n                    project.view.viewSize = new paper.Size(size.width, size.height);\n                }\n            });\n        }\n    }\n\n    getCanvasRect(useCachedCanvasRect?: boolean): ClientRect {\n        if (useCachedCanvasRect && this.cachedCanvasRect) {\n            return this.cachedCanvasRect;\n        }\n\n        this.cachedCanvasRect = this.drawElement.getBoundingClientRect();\n        return this.cachedCanvasRect;\n    }\n\n\n    normalizePoint(point: CanvasPoint, useCachedCanvasRect?: boolean): CanvasPoint {\n        const rect = this.getCanvasRect(useCachedCanvasRect);\n        return {\n            x: point.x - rect.left,\n            y: point.y - rect.top\n        };\n    }\n\n\n    addPaperItems(drawStepKey, items, exportItems) {\n        const group = new paper.Group(items);\n        const rasterize = group.rasterize();\n        group.remove();\n        rasterize.remove();\n\n        this.cachedPaperGroups.set(drawStepKey, group);\n        this.cachedPaperRasterizedGroups.set(group, rasterize);\n\n        this.fillProject.activeLayer.addChild(rasterize);\n        this.fillProject.view.update();\n        this.drawProject.view.update();\n\n        const exportGroup = new paper.Group(exportItems);\n        exportGroup.remove();\n        this.exportPaperGroups.set(drawStepKey, exportGroup);\n    }\n\n    removePaperItems(drawStepKey) {\n        const group = this.cachedPaperGroups.get(drawStepKey);\n        const rasterize = this.cachedPaperRasterizedGroups.get(group);\n        this.cachedPaperRasterizedGroups.delete(group);\n        this.cachedPaperGroups.delete(drawStepKey);\n        this.exportPaperGroups.delete(drawStepKey);\n\n        group.remove();\n        rasterize.remove();\n        this.fillProject.view.update();\n        this.drawProject.view.update();\n    }\n\n    getExportPaperGroups() {\n        return this.exportPaperGroups;\n    }\n\n\n    addBackgroundRect(color) {\n        const startRect = this.createPoint(0, 0);\n        const rectSize = new paper.Size(this.size.width, this.size.height);\n        const baseLayer = new paper.Layer();\n        baseLayer.activate();\n        this.backgroundRect = new paper.Path.Rectangle(startRect, rectSize);\n        this.backgroundRect.fillColor = new paper.Color(color);\n\n        const drawLayer = new paper.Layer();\n        drawLayer.activate();\n\n        setTimeout(() => this.drawProject.view.update());\n    }\n\n\n    private createPoint(x: number, y: number): paper.Point {\n        return new paper.Point(x, y);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Store } from '@ngrx/store';\n\nimport * as editorActions from '../store/actions/editor.actions';\nimport * as editorSelectors from '../store/selectors/editor.selectors';\nimport { StoreService } from '../../common/services/store.service';\nimport { UserDrawStep, UserDrawTool } from '../store/reducers/editor.reducer';\nimport { SMOOTH_TYPES } from '../enums/smooth-types';\n\nconst MIN_ZONES_COUNT = 1;\nconst MAX_ZONES_COUNT  = 30;\n\n@Injectable()\nexport class EditorService extends StoreService {\n    constructor(\n        store: Store<any>\n    ) {\n        super(store);\n    }\n\n    inited() {\n        this.dispatch(editorActions.inited({ init: true }));\n    }\n\n\n    getDrawState() {\n        return this.select(editorSelectors.editorState);\n    }\n\n\n    setZonesCount(count: number) {\n        const zonesCount = Math.min(MAX_ZONES_COUNT, Math.max(MIN_ZONES_COUNT, count));\n        this.dispatch(editorActions.zonesCount({zonesCount}));\n    }\n\n    getZonesCount(): Observable<number> {\n        return this.select(editorSelectors.zonesCount);\n    }\n\n\n    setTool(tool: UserDrawTool) {\n        this.dispatch(editorActions.tool({ tool }));\n    }\n\n    getTool(): Observable<UserDrawTool> {\n        return this.select(editorSelectors.tool);\n    }\n\n\n    enableDrawMirrored() {\n        this.dispatch(editorActions.enableDrawMirrored());\n    }\n\n    disableDrawMirrored() {\n        this.dispatch(editorActions.disableDrawMirrored());\n    }\n\n    isDrawMirrored(): Observable<boolean> {\n        return this.select(editorSelectors.isDrawMirrored);\n    }\n\n\n    setStrokeWidth(strokeWidth: number) {\n        this.dispatch(editorActions.strokeWidth({ strokeWidth }));\n    }\n\n    getStrokeWidth(): Observable<number> {\n        return this.select(editorSelectors.strokeWidth);\n    }\n\n\n    setSmoothType(smoothType: SMOOTH_TYPES) {\n        this.dispatch(editorActions.smoothType({ smoothType }));\n    }\n\n    getSmoothType(): Observable<SMOOTH_TYPES> {\n        return this.select(editorSelectors.smoothType);\n    }\n\n\n    setColor(color: string) {\n        this.dispatch(editorActions.color({ color }));\n    }\n\n    getColor(): Observable<string> {\n        return this.select(editorSelectors.color);\n    }\n\n\n    addUserDrawStep(step: UserDrawStep, key = Date.now()): number {\n        this.dispatch(editorActions.addUserdDrawStep({ step, key }));\n\n        return key;\n    }\n\n    removeUserDrawStep(key: number) {\n        this.dispatch(editorActions.removeUserdDrawStep({ key }));\n    }\n\n    clearUserDrawSteps() {\n        this.dispatch(editorActions.clearUserdDrawSteps());\n    }\n\n\n    updateSize(size: editorActions.DrawCanvasSize) {\n        this.dispatch(editorActions.updateCanvasSize({ size }));\n    }\n\n    getSize(): Observable<editorActions.DrawCanvasSize> {\n        return this.select(editorSelectors.size);\n    }\n}\n","import {Injectable, Inject, PLATFORM_ID} from '@angular/core';\nimport * as idb from 'idb';\nimport { isPlatformBrowser } from '@angular/common';\nimport { UserDrawState } from '../store/reducers/editor.reducer';\n\n\nconst IDB_USER_DRAW_KEY = 'user-draw';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IdbService {\n    private dbPromise;\n    private idb: any = idb;\n\n    constructor(\n        @Inject(PLATFORM_ID) platformId: string\n    ) {\n        if (isPlatformBrowser(platformId)) {\n            this.connectToIDB();\n        }\n    }\n\n    connectToIDB() {\n        this.dbPromise = this.idb.openDB('mandala-app', 1.0, {\n            upgrade: (db) => {\n                if (!db.objectStoreNames.contains(IDB_USER_DRAW_KEY)) {\n                    db.createObjectStore(IDB_USER_DRAW_KEY);\n                }\n            }\n        });\n    }\n\n    saveUserDrawState(key: string, state: UserDrawState): Promise<any> {\n        const saveState = {...state};\n        delete saveState[`init`];\n        return this.dbPromise.then((db: any) => {\n            return db.put(IDB_USER_DRAW_KEY, saveState, key);\n        });\n    }\n\n    getUserDrawState(key: string): Promise<UserDrawState> {\n        return this.dbPromise.then((db: any) => {\n            return db.get(IDB_USER_DRAW_KEY, key).then(res => res || {});\n        });\n    }\n\n    clearUserDrawState(key: string): Promise<any> {\n        return this.dbPromise.then((db: any) => {\n            return db.delete(IDB_USER_DRAW_KEY, key);\n        });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { TOOLS, DRAW_IMAGES } from '../enums/tools';\nimport { EditorService } from './editor.service';\nimport { DrawFreeTool, DrawLineTool, FillBackgroundTool, PipetteTool, FillBucketTool, DrawImageTool } from '../tools';\nimport { UndoService } from './undo/undo.service';\nimport { CanvasService } from './canvas.service';\nimport { Observable, Observer } from 'rxjs';\nimport { UserDrawTool } from '../store/reducers/editor.reducer';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n\n@Injectable()\nexport class ToolService {\n    private currentTool: EditorTool;\n\n    constructor(\n        private editorService: EditorService,\n        private canvasService: CanvasService,\n        private undoService: UndoService,\n        private http: HttpClient\n    ) {}\n\n    createTool(tool: UserDrawTool): Observable<EditorTool> {\n        return Observable.create((observer: Observer<EditorTool>) => {\n            switch (tool.type) {\n                case TOOLS.DRAW_FREE:\n                    observer.next(new DrawFreeTool(this.canvasService, this.editorService, this.undoService));\n                    break;\n                case TOOLS.DRAW_LINE:\n                    observer.next(new DrawLineTool(this.canvasService, this.editorService, this.undoService));\n                    break;\n                case TOOLS.DRAW_IMAGE:\n                    const imagePath = tool.params && tool.params.imagePath ? tool.params.imagePath : DRAW_IMAGES[0];\n                    const responseType = 'text';\n                    const headers = new HttpHeaders();\n                    headers.set('Accept', 'image/svg+xml');\n                    this.http.get(imagePath, {headers, responseType})\n                        .subscribe(data => {\n                            const imageDrawTool = new DrawImageTool(this.canvasService, this.editorService, this.undoService);\n                            imageDrawTool.setDrawImage(data, imagePath);\n                            observer.next(imageDrawTool);\n                            observer.complete();\n                        });\n                    return;\n                case TOOLS.FILL_BACKGROUND:\n                    observer.next(new FillBackgroundTool(this.canvasService, this.editorService, this.undoService));\n                    break;\n                case TOOLS.FILL_BUCKET:\n                    observer.next(new FillBucketTool(this.canvasService, this.editorService, this.undoService));\n                    break;\n                case TOOLS.PIPETTE:\n                    observer.next(new PipetteTool(this.canvasService, this.editorService, this.undoService));\n                    break;\n            }\n\n            observer.complete();\n        });\n    }\n\n    getCurrentTool(): EditorTool {\n        return this.currentTool;\n    }\n\n    setCurrentTool(tool: EditorTool) {\n        this.currentTool = tool;\n    }\n}\n","export interface UndoStackItemCommand {\n    redo: () => void;\n    undo: () => void;\n}\n\nexport class UndoStackItem {\n    commands: UndoStackItemCommand[] = [];\n\n    static createUndoStackItem({redo, undo}: UndoStackItemCommand) {\n        const undoStackItem = new UndoStackItem();\n        undoStackItem.add(redo, undo);\n        return undoStackItem;\n    }\n\n    add(redo, undo) {\n        this.commands.push({ redo, undo });\n    }\n\n    undo() {\n        for (let index = this.commands.length - 1; index >= 0; index--) {\n            const command = this.commands[index];\n            command.undo();\n        }\n    }\n\n    redo() {\n        for (let index = 0, length = this.commands.length; index < length; index++) {\n            const command = this.commands[index];\n            command.redo();\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { UndoStackItem, UndoStackItemCommand } from './undo-stack-item';\nimport { Subject, fromEvent } from 'rxjs';\nimport { Router, NavigationStart } from '@angular/router';\nimport { takeUntil, filter } from 'rxjs/operators';\n\n@Injectable()\nexport class UndoService {\n    destroy$ = new Subject<boolean>();\n    stack: UndoStackItem[] = [];\n    index = -1;\n    limit = 50;\n    isEnabled = false;\n\n    constructor(\n        private router: Router\n    ) {}\n\n    enable() {\n        if (this.isEnabled) {\n            return;\n        }\n\n        this.isEnabled = true;\n\n        fromEvent(window, 'keydown').pipe(takeUntil(this.destroy$))\n            .subscribe((e: KeyboardEvent) => this.onKeydown(e));\n\n        this.router.events.pipe(filter(event => event instanceof NavigationStart))\n            .subscribe((() => this.clear()));\n    }\n\n    disable() {\n        this.destroy$.next(true);\n        this.isEnabled = false;\n    }\n\n    hasUndo(): boolean {\n        return this.index > -1;\n    }\n\n    hasRedo(): boolean {\n        return this.index < (this.stack.length - 1);\n    }\n\n    add(item: UndoStackItem) {\n        this.stack.splice(this.index + 1, this.stack.length - this.index);\n        this.stack.push(item);\n\n        if (this.stack.length > this.limit) {\n            this.stack.splice(0, this.stack.length - this.limit);\n        }\n\n        this.index = this.stack.length - 1;\n    }\n\n    addCommand(command: UndoStackItemCommand): UndoStackItem {\n        const undoStackItem = UndoStackItem.createUndoStackItem(command);\n        this.add(undoStackItem);\n\n        return undoStackItem;\n    }\n\n    undo() {\n        const item = this.stack[this.index];\n        if (item) {\n            item.undo();\n            this.index -= 1;\n        }\n    }\n\n    redo() {\n        const item = this.stack[this.index + 1];\n        if (item) {\n            item.redo();\n            this.index += 1;\n        }\n    }\n\n    remove(item: UndoStackItem) {\n        const index = this.stack.indexOf(item);\n        if (index > -1) {\n            this.stack.splice(index, 1);\n            if (this.index >= index) {\n                this.index--;\n            }\n        }\n    }\n\n    setLimit(limit: number) {\n        this.limit = limit;\n    }\n\n    clear() {\n        this.stack = [];\n        this.index = -1;\n    }\n\n    private onKeydown(event: KeyboardEvent) {\n        const isCtrlZ = (e) => (e.metaKey || e.ctrlKey) && e.keyCode === 90;\n        if (event.shiftKey && isCtrlZ(event)) {\n            this.redo();\n        } else if (isCtrlZ(event)) {\n            this.undo();\n        }\n    }\n}\n","import { createAction, props } from '@ngrx/store';\nimport { UserDrawStep, UserDrawTool } from '../reducers/editor.reducer';\nimport { SMOOTH_TYPES } from '../../enums/smooth-types';\n\nexport interface DrawPoint {\n    x: number;\n    y: number;\n}\n\nexport interface DrawCanvasSize {\n    width: number;\n    height: number;\n}\n\n\nexport const inited = createAction('[Mandala Editor] editor inited', props<{init: boolean}>());\nexport const zonesCount = createAction('[Mandala Editor] Zones Count', props<{zonesCount: number}>());\nexport const enableDrawMirrored = createAction('[Mandala Editor] Enable Draw Mirrored');\nexport const disableDrawMirrored = createAction('[Mandala Editor] Disable Draw Mirrored');\nexport const tool = createAction('[Mandala Editor] Tool', props<{tool: UserDrawTool}>());\nexport const strokeWidth = createAction('[Mandala Editor] Stroke Width', props<{strokeWidth: number}>());\nexport const smoothType = createAction('[Mandala Editor] Smooth Type', props<{smoothType: SMOOTH_TYPES}>());\nexport const color = createAction('[Mandala Editor] Color', props<{color: string}>());\nexport const addUserdDrawStep = createAction('[Mandala Editor] Add user draw step',  props<{ step: UserDrawStep, key: number}>());\nexport const removeUserdDrawStep = createAction('[Mandala Editor] Remove user draw step',  props<{ key: number}>());\nexport const clearUserdDrawSteps = createAction('[Mandala Editor] Clear user draw steps');\nexport const updateCanvasSize = createAction('[Mandala Editor] Update canvas size',  props<{ size: DrawCanvasSize}>());\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { of, from } from 'rxjs';\nimport { mergeMap, take, debounceTime, catchError } from 'rxjs/operators';\nimport * as editorAction from '../actions/editor.actions';\nimport { IdbService, EditorService } from '../../services';\n\n@Injectable()\nexport class EditorEffects {\n    constructor(\n        private actions$: Actions,\n        private editorService: EditorService,\n        private idbService: IdbService\n    ) {}\n\n    drawState$ = createEffect(() =>\n        this.actions$.pipe(\n            ofType(\n                editorAction.color,\n                editorAction.disableDrawMirrored,\n                editorAction.enableDrawMirrored,\n                editorAction.strokeWidth,\n                editorAction.smoothType,\n                editorAction.tool,\n                editorAction.zonesCount,\n                editorAction.addUserdDrawStep,\n                editorAction.removeUserdDrawStep,\n                editorAction.clearUserdDrawSteps,\n                editorAction.updateCanvasSize\n            ),\n            mergeMap(() => {\n                return this.editorService.getDrawState()\n                    .pipe(\n                        take(1),\n                        debounceTime(100),\n                        mergeMap((state) => {\n                            return from(\n                                !state.init ? of(null) : this.idbService.saveUserDrawState('current-state', state))\n                                    .pipe(\n                                        catchError(e => of(null))\n                                    );\n                        })\n                    );\n            })\n        ), { dispatch: false }\n    );\n\n}\n","import { createReducer, on, Action } from '@ngrx/store';\nimport * as editorActions from './../actions/editor.actions';\nimport { TOOLS } from '../../enums/tools';\nimport { SMOOTH_TYPES } from '../../enums/smooth-types';\n\nexport interface UserDrawState {\n    init: boolean;\n    zonesCount: number;\n    isDrawMirrored: boolean;\n    tool: {\n        type: TOOLS;\n        params?: {}\n    };\n    strokeWidth: number;\n    smoothType: SMOOTH_TYPES;\n    color: string;\n    size: {width: number, height: number};\n    steps: UserDrawStateStep;\n}\n\nexport interface UserDrawStateStep {\n    [key: number]: UserDrawStep;\n}\nexport interface UserDrawTool {\n    type: TOOLS;\n    params?: {\n        imagePath?: string\n    };\n}\n\nexport interface UserDrawStep {\n    points: {x: number, y: number}[];\n    zonesCount?: number;\n    isDrawMirrored?: boolean;\n    tool?: UserDrawTool;\n    strokeWidth?: number;\n    color?: string;\n    smoothType?: SMOOTH_TYPES;\n}\n\nexport const initialState: UserDrawState = {\n    init: false,\n    zonesCount: 10,\n    isDrawMirrored: false,\n    tool: {\n        type: TOOLS.DRAW_FREE\n    },\n    strokeWidth: 6,\n    smoothType: SMOOTH_TYPES.LIGHT_SMOOTH,\n    color: 'rgb(0, 0, 0)',\n    size: null,\n    steps: {}\n};\n\nconst updateState = (state, props) => ({...state, ...props});\nconst updatePropStatus = (prop: string, status: boolean) => (state) => ({...state, [prop]: status});\nconst addUserDrawStep = (state, {step, key}) => ({...state, steps: {...state.steps, [key]: step}});\nconst removeUserDrawStep = (state, {key}) => {\n    const steps = {...state.steps};\n    delete steps[key];\n    return {...state, steps};\n};\n\nconst transformReducer = createReducer(\n    initialState,\n    on(editorActions.zonesCount, updateState),\n    on(editorActions.enableDrawMirrored, updatePropStatus('isDrawMirrored', true)),\n    on(editorActions.disableDrawMirrored, updatePropStatus('isDrawMirrored', false)),\n    on(editorActions.tool, updateState),\n    on(editorActions.strokeWidth, updateState),\n    on(editorActions.smoothType, updateState),\n    on(editorActions.color, updateState),\n    on(editorActions.addUserdDrawStep, addUserDrawStep),\n    on(editorActions.removeUserdDrawStep, removeUserDrawStep),\n    on(editorActions.clearUserdDrawSteps, state => ({...state, steps: []})),\n    on(editorActions.updateCanvasSize, (state, {size}) => ({...state, size})),\n    on(editorActions.inited, (state, {init}) => ({...state, init})),\n);\n\nexport function reducer(state, action: Action) {\n    return transformReducer(state, action);\n}\n","import { createSelector } from '@ngrx/store';\n\nexport const selectMandalaEditor = (state) => state.mandala.editor;\n\nconst getSelector = (prop) => {\n    return createSelector(\n        selectMandalaEditor,\n        (state) => state[prop]\n    );\n};\n\nexport const zonesCount = getSelector('zonesCount');\nexport const size = getSelector('size');\nexport const isDrawMirrored = getSelector('isDrawMirrored');\nexport const tool = getSelector('tool');\nexport const strokeWidth = getSelector('strokeWidth');\nexport const smoothType = getSelector('smoothType');\nexport const color = getSelector('color');\nexport const editorState = selectMandalaEditor;\n","import { EditorDrawToolBase } from './draw.base';\nimport { EditorService, UndoService, CanvasService } from '../services';\nimport * as paper from 'paper';\nimport { TOOLS } from '../enums/tools';\nimport { SMOOTH_TYPES } from '../enums/smooth-types';\n\nexport class DrawFreeTool extends EditorDrawToolBase {\n    protected tool = TOOLS.DRAW_FREE;\n    protected toolParams: any;\n\n    constructor(\n        protected canvasService: CanvasService,\n        protected editorService: EditorService,\n        protected undoService: UndoService\n    ) {\n        super(editorService);\n    }\n\n    drawZoneStartIteration({ drawZonePoint }) {\n        return this.createPath(drawZonePoint);\n    }\n\n    drawZoneIteration({ drawZonePath, drawZonePoint }) {\n        drawZonePath.add(drawZonePoint);\n\n        return drawZonePath;\n    }\n\n    drawZoneEndIteration({ drawZonePath }) {\n        if (this.smoothType === SMOOTH_TYPES.HARD_SMOOTH) {\n            drawZonePath.simplify();\n            drawZonePath.smooth();\n        } else if (this.smoothType === SMOOTH_TYPES.LIGHT_SMOOTH) {\n            drawZonePath.simplify();\n        }\n\n        return drawZonePath.clone({insert: false});\n    }\n\n    createPath(position: paper.Point): paper.Path {\n        const path = new paper.Path();\n        path.moveTo(position);\n        path.strokeColor = new paper.Color(this.color);\n        path.strokeWidth = this.strokeWidth;\n        path.strokeCap = 'round';\n\n        return path;\n    }\n}\n","import { EditorDrawToolBase } from './draw.base';\nimport { EditorService, UndoService, CanvasService } from '../services';\nimport * as paper from 'paper';\nimport { TOOLS } from '../enums/tools';\n\nconst MAX_IMAGE_WIDTH = 500;\nconst START_DRAW_WIDTH = 50;\n\nexport class DrawImageTool extends EditorDrawToolBase {\n    public toolParams: any;\n    protected tool = TOOLS.DRAW_IMAGE;\n    protected svgGroup: any;\n    protected scale: number;\n    protected initScale: number;\n    protected drawImage: paper.Raster;\n\n    constructor(\n        protected canvasService: CanvasService,\n        protected editorService: EditorService,\n        protected undoService: UndoService\n    ) {\n        super(editorService);\n    }\n\n    setDrawImage(svg, imagePath) {\n        this.toolParams = { imagePath };\n\n        this.svgGroup = paper.project.importSVG(svg, {insert: false});\n        this.drawImage = this.svgGroup.rasterize();\n\n        const isWidthBigger = this.drawImage.size.width > this.drawImage.size.height;\n        const scale = MAX_IMAGE_WIDTH / (isWidthBigger ? this.drawImage.size.width : this.drawImage.size.height);\n        this.initScale = scale;\n\n        this.drawImage.size = new paper.Size(\n            scale * this.drawImage.size.width,\n            scale * this.drawImage.size.height\n        );\n    }\n\n    drawZoneStartIteration({ drawZonePoint }) {\n        const mainImage = this.createImage(drawZonePoint);\n        paper.project.activeLayer.addChild(mainImage);\n\n        return mainImage;\n    }\n\n    drawZoneIteration({ drawZonePath, drawPoint, zoneAngle, isMirror }) {\n        drawZonePath = this.updateImage(drawPoint, drawZonePath, isMirror ? zoneAngle + 180 : zoneAngle);\n        paper.project.activeLayer.addChild(drawZonePath);\n\n        return drawZonePath;\n    }\n\n    drawZoneEndIteration({ drawZonePath }) {\n        return this.createExportImage(drawZonePath);\n    }\n\n    createExportImage(image: paper.Raster): paper.Group {\n        const exportImage = this.svgGroup.clone();\n        exportImage.position = image.position;\n        exportImage.rotate(image.rotation);\n        // exportImage.style.strokeWidth = null;\n        // exportImage.style.strokeCap = null;\n        // exportImage.style.strokeJoin = null;\n        // exportImage.style.strokeScaling = false;\n        exportImage.scale((image.scaling.x + image.scaling.y) * this.initScale);\n\n        return exportImage;\n    }\n\n    createImage(position: paper.Point, dist = 0): paper.Raster {\n        const path = this.drawImage.clone() as paper.Raster;\n        path.position = position;\n        path.scale((START_DRAW_WIDTH + dist * 2) / path.size.width);\n        return path;\n    }\n\n    updateImage(drawPoint, oldImage: paper.Raster, rotation: number): paper.Raster {\n        oldImage.remove();\n        const dist = drawPoint.getDistance(this.drawStartPoint);\n        const image = this.createImage(oldImage.position, dist);\n        const vector = drawPoint.subtract(this.drawStartPoint);\n        image.rotate(vector.angle + rotation);\n\n        return image;\n    }\n}\n","import { EditorDrawToolBase } from './draw.base';\nimport { EditorService, UndoService, CanvasService } from '../services';\nimport * as paper from 'paper';\nimport { TOOLS } from '../enums/tools';\n\nexport class DrawLineTool extends EditorDrawToolBase {\n    protected tool = TOOLS.DRAW_LINE;\n    protected toolParams;\n\n    constructor(\n        protected canvasService: CanvasService,\n        protected editorService: EditorService,\n        protected undoService: UndoService\n    ) {\n        super(editorService);\n    }\n\n    drawZoneStartIteration({ drawZonePoint }) {\n        return this.createLine(drawZonePoint);\n    }\n\n    drawZoneIteration({ drawZonePath, drawZonePoint }) {\n        const [, toSegment] = drawZonePath.segments;\n        toSegment.point = drawZonePoint;\n        return drawZonePath;\n    }\n\n    drawZoneEndIteration({ drawZonePath }) {\n        drawZonePath.simplify();\n\n        return drawZonePath.clone({insert: false});\n    }\n\n    createLine(position: paper.Point): paper.Path.Line {\n        const line = new paper.Path.Line(position, position);\n        line.strokeColor = new paper.Color(this.color);\n        line.strokeWidth =  this.strokeWidth;\n        line.strokeCap = 'round';\n\n        return line;\n    }\n}\n","import { Observable, fromEvent } from 'rxjs';\nimport { EditorService, UndoService, CanvasService } from '../services';\nimport { EditorToolBase } from './tool.base';\nimport { takeUntil, throttleTime } from 'rxjs/operators';\nimport * as Hammer from 'hammerjs';\nimport * as paper from 'paper';\nimport { Transformer, TRANSFORM_TYPES } from './helpers/transformer';\nimport { UndoStackItem } from '../services/undo/undo-stack-item';\n\ninterface DrawPoint {\n    x: number;\n    y: number;\n}\n\nexport abstract class EditorDrawToolBase extends EditorToolBase {\n    protected abstract canvasService: CanvasService;\n    protected abstract undoService: UndoService;\n    protected abstract editorService: EditorService;\n    protected abstract toolParams: any;\n\n    hummerManager: HammerManager;\n    isDrawing: boolean;\n    isTransforming: boolean;\n    drawPaths = [];\n    hitPaths = [];\n    exportPaths = [];\n    drawPoints: DrawPoint[] = [];\n    transformPoints: DrawPoint[][] = [];\n    currentTransformPoints: DrawPoint[] = [];\n    centerPoint: paper.Point;\n    drawStartPoint: paper.Point;\n    transformUndoItems: UndoStackItem[] = [];\n\n    transformer: Transformer;\n\n    addSubscriptions(isTransformMode?: boolean) {\n        super.addSubscriptions();\n\n        const pan = new Hammer.Pan({ threshold: 0 });\n        const press = new Hammer.Press({ time: 1 });\n        this.hummerManager = new Hammer.Manager(this.canvasService.getDrawElement());\n        this.hummerManager.add([pan, press]);\n\n        this.hummerManager.on(isTransformMode ? 'press' : 'panstart', (e) => {\n            const point = this.canvasService.normalizePoint(e.center);\n            isTransformMode ? this.transformStart(point) : this.drawStart(point);\n        });\n\n        if (isTransformMode) {\n            fromEvent(window, 'click').pipe(takeUntil(this.clear$))\n                .subscribe((e) => {\n                    if (e.target !== this.canvasService.drawProject.view.element) {\n                        this.switchFromTransformToDraw();\n                    }\n                });\n        }\n\n        const pan$ = Observable.create((observer) => {\n            this.hummerManager.on('pan', e => observer.next(e));\n        }).pipe(throttleTime(30));\n        pan$.pipe(takeUntil(this.clear$))\n            .subscribe(e => {\n                const point = this.canvasService.normalizePoint(e.center);\n                isTransformMode ? this.transform(point) : this.draw(point);\n            });\n\n        this.hummerManager.on('panend', () => isTransformMode ? this.transformEnd() : this.drawEnd());\n    }\n\n    clearSubscriptions() {\n        super.clearSubscriptions();\n\n        this.hummerManager.destroy();\n    }\n\n    drawStart({x, y}: DrawPoint) {\n        this.drawPoints.push({x, y});\n        this.isDrawing = true;\n        this.centerPoint = this.getCanvasCenterPoint();\n        this.drawStartPoint = this.createPoint(x, y);\n        const drawAngle = this.getDrawAngle(this.drawStartPoint);\n        this.zonesIteration((zoneIndex, zoneAngle, zoneStep) => {\n            const params = { zoneIndex, zoneAngle, zoneStep, drawPoint: this.drawStartPoint, drawAngle };\n            const [mainPoint, mirrorPoint] = this.getDrawPoints(this.drawStartPoint, zoneStep, zoneAngle, drawAngle);\n            this.drawPaths.push([\n                this.drawZoneStartIteration({drawZonePoint: mainPoint, ...params}),\n                this.isDrawMirrored ? this.drawZoneStartIteration({drawZonePoint: mirrorPoint, ...params}) : null\n            ]);\n        });\n\n        this.draw({x, y});\n    }\n\n    abstract drawZoneStartIteration(params);\n\n\n    draw({x, y}: DrawPoint) {\n        if (this.isDrawing) {\n            this.drawPoints.push({x, y});\n\n            const drawPoint = this.createPoint(x, y);\n            const drawAngle = this.getDrawAngle(drawPoint);\n            this.zonesIteration((zoneIndex, zoneAngle, zoneStep) => {\n                const params = { zoneIndex, zoneAngle, zoneStep, drawPoint, drawAngle };\n                const [mainPoint, mirrorPoint] = this.getDrawPoints(drawPoint, zoneStep, zoneAngle, drawAngle);\n                let [zonePath, mirrorPath] = this.drawPaths[zoneIndex];\n                if (zonePath) {\n                    zonePath = this.drawZoneIteration({ isMirror: false, drawZonePath: zonePath, drawZonePoint: mainPoint, ...params});\n                }\n                if (mirrorPath) {\n                    mirrorPath = this.drawZoneIteration({ isMirror: true, drawZonePath: mirrorPath, drawZonePoint: mirrorPoint, ...params});\n                }\n\n                this.drawPaths[zoneIndex] = [zonePath, mirrorPath];\n            });\n            this.canvasService.drawProject.view.update();\n        }\n    }\n\n    abstract drawZoneIteration(params);\n\n\n    drawEnd() {\n        const drawPaths = this.drawPaths;\n\n        const addPaths = () => {\n            this.zonesIteration((zoneIndex, zoneAngle, zoneStep) => {\n                const params = {zoneIndex, zoneAngle, zoneStep};\n                const [zonePath, mirrorPath] = drawPaths[zoneIndex];\n                const exportPaths = [null, null];\n                const hitPaths = [null, null];\n                if (zonePath) {\n                    exportPaths[0] = this.drawZoneEndIteration({ drawZonePath: zonePath, ...params });\n                    hitPaths[0] = this.createHitRect(zonePath);\n                }\n                if (mirrorPath) {\n                    exportPaths[1] = this.drawZoneEndIteration({ drawZonePath: mirrorPath, ...params });\n                    hitPaths[1] = this.createHitRect(mirrorPath);\n                }\n\n                this.exportPaths[zoneIndex] = exportPaths;\n                this.hitPaths[zoneIndex] = hitPaths;\n            });\n\n            this.redraw();\n\n            this.clearSubscriptions();\n            this.addSubscriptions(true);\n        };\n\n        addPaths();\n\n        const undoItem = this.undoService.addCommand({\n            undo: () => {\n                const removePath = path => path.remove();\n                this.pathsApply(this.drawPaths, removePath);\n                this.pathsApply(this.hitPaths, removePath);\n                this.redraw();\n                this.drawPaths = [];\n                this.exportPaths = [];\n                this.hitPaths = [];\n\n                this.clearSubscriptions();\n                this.addSubscriptions();\n            },\n            redo: () => {\n                this.drawPaths = drawPaths;\n                this.pathsApply(this.drawPaths, path => paper.project.activeLayer.addChild(path));\n                addPaths();\n\n                this.redraw();\n            }\n        });\n        this.transformUndoItems.push(undoItem);\n\n        this.isDrawing = false;\n    }\n\n    abstract drawZoneEndIteration(params);\n\n\n    transformStart(point: DrawPoint) {\n        const tPoint = this.createPoint(point.x, point.y);\n        this.currentTransformPoints.push(point);\n        this.isTransforming = false;\n\n        const checkForHit = (path, isMirror) => {\n            if (this.isTransforming) {\n                return;\n            }\n\n            const hitResult = path.hitTest(tPoint);\n            if (hitResult || tPoint.isInside(path.bounds)) {\n                this.isTransforming = true;\n                this.hitedPath(tPoint, path, hitResult, isMirror);\n            }\n        };\n        this.pathsApply(this.hitPaths, checkForHit, tPoint);\n\n        if (!this.isTransforming) {\n            this.switchFromTransformToDraw();\n        } else {\n            this.pathsApplyWithRedraw(this.hitPaths, (path) => {\n                path.selected = false;\n                path.opacity = 0;\n            });\n        }\n    }\n\n    switchFromTransformToDraw() {\n        this.finishDraw();\n\n        this.clearSubscriptions();\n        this.addSubscriptions();\n    }\n\n    finishDraw() {\n        this.pathsApplyWithRedraw(this.hitPaths, path => path.remove());\n\n        const drawStep = this.getState(this.drawPoints, this.toolParams);\n        const drawStepKey = this.editorService.addUserDrawStep(drawStep);\n        const allDrawPaths = this.getAllPaths(this.drawPaths);\n        const allExportPaths = this.getAllPaths(this.exportPaths);\n        this.canvasService.addPaperItems(drawStepKey, allDrawPaths, allExportPaths);\n        this.undoService.addCommand({\n            undo: () => {\n                this.editorService.removeUserDrawStep(drawStepKey);\n                this.canvasService.removePaperItems(drawStepKey);\n            },\n            redo: () => {\n                this.editorService.addUserDrawStep(drawStep, drawStepKey);\n                this.canvasService.addPaperItems(drawStepKey, allDrawPaths, allExportPaths);\n            }\n        });\n\n        this.transformUndoItems.forEach(undoItem => this.undoService.remove(undoItem));\n        this.transformUndoItems = [];\n\n        this.drawPaths = [];\n        this.exportPaths = [];\n        this.drawPoints = [];\n        this.transformPoints = [];\n        this.hitPaths = [];\n    }\n\n\n    transform({x, y}: DrawPoint) {\n        if (!this.isTransforming) {\n            return;\n        }\n\n        this.currentTransformPoints.push({x, y});\n        const tPoint = this.createPoint(x, y);\n\n        if (this.transformer.transfromType === TRANSFORM_TYPES.MOVE) {\n            const pathMove = (path, isMirror, [mainPoint, mirrorPoint]) => {\n                path.position = isMirror ?  mirrorPoint : mainPoint;\n            };\n            const point = this.transformer.updateTransformLastPoint(tPoint);\n            this.applyTransform(pathMove, point);\n        } else if (this.transformer.transfromType === TRANSFORM_TYPES.ROTATE) {\n            const rotation = this.transformer.updateTransformRotation(tPoint);\n            this.applyTransform(path => path.rotate(rotation));\n        } else {\n            const prevWidth = this.transformer.transformWidth;\n            const transformWidth = this.transformer.updateTransformWidth(tPoint);\n            const scale = transformWidth / prevWidth;\n\n            this.applyTransform(path => path.scale(scale));\n        }\n    }\n\n    applyTransform(applyFunc, point?) {\n        this.pathsApply(this.hitPaths, applyFunc, point);\n        this.pathsApply(this.drawPaths, applyFunc, point);\n        this.pathsApply(this.exportPaths, applyFunc, point);\n        this.redraw();\n    }\n\n\n    transformEnd() {\n        if (this.isTransforming) {\n            this.transformPoints.push(this.currentTransformPoints);\n            this.currentTransformPoints = [];\n            this.isTransforming = false;\n\n            this.pathsApplyWithRedraw(this.hitPaths, (path) => {\n                path.selected = true;\n                path.opacity = 1;\n            });\n        }\n    }\n\n    hitedPath(point: paper.Point, path: paper.Raster, hitResult: paper.HitResult, isMirrorTransform: boolean) {\n        this.transformer = new Transformer(point, path, hitResult, isMirrorTransform);\n    }\n\n    createHitRect(path) {\n        const size = path instanceof paper.Raster ? path.size : new paper.Size(path.bounds.width, path.bounds.height);\n        const rect = new paper.Path.Rectangle(path.position, size);\n        rect.transform(path.matrix);\n        rect.position = path.position;\n        rect.strokeColor = new paper.Color('red');\n        rect.strokeWidth = 2;\n        rect.selected = true;\n        rect.selectedColor = new paper.Color('red');\n\n        return rect;\n    }\n\n\n    getCanvasCenterPoint() {\n        const size = this.canvasService.getCanvasSize();\n        return this.createPoint(size.width / 2, size.height / 2);\n    }\n\n    pathsApplyWithRedraw(zones, applyFunc, point?: paper.Point) {\n        this.pathsApply(zones, applyFunc, point);\n        this.redraw();\n    }\n\n    pathsApply(paths, applyFunc, point?: paper.Point) {\n        if (point) {\n            const angle = this.getDrawAngle(point);\n            this.zonesIteration((zoneIndex, zoneAngle, zoneStep) => {\n                const points = this.getDrawPoints(point, zoneStep, zoneAngle, angle);\n                const [zonePath, mirrorPath] = paths[zoneIndex];\n                if (zonePath) {\n                    applyFunc(zonePath, false, points);\n                }\n                if (mirrorPath) {\n                    applyFunc(mirrorPath, true, points);\n                }\n            });\n        } else {\n            paths.forEach(([zonePath, mirrorPath]) => {\n                if (zonePath) {\n                    applyFunc(zonePath, false);\n                }\n                if (mirrorPath) {\n                    applyFunc(mirrorPath, true);\n                }\n            });\n        }\n    }\n\n    redraw() {\n        this.canvasService.drawProject.view.update();\n    }\n\n    zonesIteration(cb: (zoneIndex: number, zoneAngle: number, zoneStep: number) => void) {\n        const step = 360 / this.zonesCount;\n\n        for (let i = 0; i < this.zonesCount; i++) {\n            cb(i, step * i, step);\n        }\n    }\n\n    createPoint(x: number, y: number): paper.Point {\n        return new paper.Point(x, y);\n    }\n\n    getDrawAngle(drawPoint: paper.Point) {\n        const centerPoint = this.getCanvasCenterPoint();\n        const size = this.canvasService.getCanvasSize();\n        const halfHeight = size.height / 2;\n        const point2 = new paper.Point(drawPoint.y > halfHeight ? 0 : size.height, halfHeight);\n        const vector1 = drawPoint.subtract(centerPoint);\n        const vector2 = point2.subtract(centerPoint);\n        return vector1.getAngle(vector2);\n    }\n\n    getDrawPoints(drawPoint: paper.Point, zoneStep: number, zoneAngle: number, drawAngle: number): [paper.Point, paper.Point] {\n        const diff = drawAngle + zoneStep / 2;\n        return [\n            this.getDrawPointWithRotation(drawPoint, zoneAngle),\n            this.getDrawPointWithRotation(drawPoint, zoneAngle + diff * 2)\n        ];\n    }\n\n    getDrawPointWithRotation(drawPoint: paper.Point, rotateAngle: number): paper.Point {\n        return drawPoint.rotate(rotateAngle, this.centerPoint);\n    }\n\n    getAllPaths(paths) {\n        return paths.reduce((list, zonePaths) => {\n            zonePaths.forEach(p => p && list.push(p));\n            return list;\n        }, []);\n    }\n\n    getState(points = [], toolParams = {}) {\n        const state = super.getState(points, toolParams);\n        const transformPoints = this.transformPoints;\n        return {...state, transformPoints};\n    }\n}\n","import { EditorTapToolBase, TapPoint } from './tap.base';\nimport { EditorService, UndoService, CanvasService } from '../services';\nimport * as paper from 'paper';\nimport { TOOLS } from '../enums/tools';\n\nexport class FillBackgroundTool extends EditorTapToolBase {\n    protected tool = TOOLS.FILL_BACKGROUND;\n\n    constructor(\n        protected canvasService: CanvasService,\n        protected editorService: EditorService,\n        protected undoService: UndoService\n    ) {\n        super(editorService);\n    }\n\n    tap(point: TapPoint) {\n        const drawStep = this.getState([point]);\n        const drawStepKey = this.editorService.addUserDrawStep(drawStep);\n\n        const prevColor = this.canvasService.backgroundRect.fillColor;\n        const currentColor = this.color;\n        this.updateBackgroundColor(currentColor);\n\n        this.undoService.addCommand({\n            undo: () => {\n                this.updateBackgroundColor(prevColor);\n                this.editorService.removeUserDrawStep(drawStepKey);\n            },\n            redo: () => {\n                this.updateBackgroundColor(currentColor);\n                this.editorService.addUserDrawStep(drawStep, drawStepKey);\n            }\n        });\n    }\n\n    private updateBackgroundColor(color) {\n        this.canvasService.backgroundRect.fillColor = new paper.Color(color);\n        this.canvasService.drawProject.view.update();\n    }\n}\n","import { EditorTapToolBase, TapPoint } from './tap.base';\nimport { EditorService, UndoService, CanvasService } from '../services';\nimport MagicWand from './../helpers/magic-wand.js';\nimport * as paper from 'paper';\nimport { TOOLS } from '../enums/tools';\n\nexport class FillBucketTool extends EditorTapToolBase {\n    rasters = [];\n    tool = TOOLS.FILL_BUCKET;\n\n    constructor(\n        protected canvasService: CanvasService,\n        protected editorService: EditorService,\n        protected undoService: UndoService\n    ) {\n        super(editorService);\n    }\n\n    tap({x, y}: TapPoint) {\n        const cvs = this.canvasService.fillProject.view.element;\n        const imageInfo = {\n            data: null,\n            width: cvs.width,\n            height: cvs.height,\n            context: cvs.getContext('2d')\n        };\n\n        const tempCanvas = document.createElement('canvas');\n        const tempCtx = tempCanvas.getContext('2d');\n        tempCtx.canvas.width = imageInfo.width;\n        tempCtx.canvas.height = imageInfo.height;\n        tempCtx.fillStyle = 'white';\n        tempCtx.fillRect(0, 0, imageInfo.width, imageInfo.height);\n        tempCtx.drawImage(cvs, 0, 0);\n        imageInfo.data = tempCtx.getImageData(0, 0, imageInfo.width, imageInfo.height);\n\n        const image = {\n            data: imageInfo.data.data,\n            width: imageInfo.width,\n            height: imageInfo.height,\n            bytes: 4\n        };\n\n        let mask = MagicWand.floodFill(image, x * 2, y * 2, 15);\n        mask = MagicWand.gaussBlurOnlyBorder(mask, 5);\n\n        const simplifyTolerant = 0;\n        const simplifyCount = 30;\n        let cs = MagicWand.traceContours(mask);\n        cs = MagicWand.simplifyContours(cs, simplifyTolerant, simplifyCount);\n        mask = null;\n\n        const group = new paper.Group();\n        // outer\n        for (const csItem of cs) {\n            if (csItem.inner) {\n                continue;\n            }\n\n            let myPath = new paper.Path() as any;\n            myPath.strokeColor = new paper.Color(this.color);\n            myPath.fillColor = new paper.Color(this.color);\n            const ps = csItem.points;\n            myPath.position = new paper.Point(ps[0].x / 2, ps[0].y / 2);\n            for (let j = 1; j < ps.length; j++) {\n                myPath.add(new paper.Point(ps[j].x / 2, ps[j].y / 2));\n            }\n            myPath.closed = true;\n\n            // inner\n            for (const csItem2 of cs) {\n                if (!csItem2.inner) {\n                    continue;\n                }\n                const myPath2 = new paper.Path();\n                myPath2.strokeColor = new paper.Color('red');\n                myPath2.fillColor = new paper.Color('green');\n                const ps2 = csItem2.points;\n                myPath2.position = new paper.Point(ps2[0].x / 2, ps2[0].y / 2);\n                for (let j = 1; j < ps2.length; j++) {\n                    myPath2.add(new paper.Point(ps2[j].x / 2, ps2[j].y / 2));\n                }\n                myPath2.closed = true;\n\n                const newPath = myPath.exclude(myPath2);\n                myPath.remove();\n                myPath2.remove();\n                myPath = newPath;\n            }\n\n            myPath.remove();\n            group.addChild(myPath);\n        }\n\n        const drawStep = this.getState([{x, y}]);\n        const drawStepKey = this.editorService.addUserDrawStep(drawStep);\n        this.canvasService.addPaperItems(drawStepKey, [group], [group]);\n        this.undoService.addCommand({\n            undo: () => {\n                this.editorService.removeUserDrawStep(drawStepKey);\n                this.canvasService.removePaperItems(drawStepKey);\n            },\n            redo: () => {\n                this.editorService.addUserDrawStep(drawStep, drawStepKey);\n                this.canvasService.addPaperItems(drawStepKey, [group], [group]);\n            }\n        });\n    }\n\n}\n","import * as paper from 'paper';\n\nexport enum TRANSFORM_TYPES {\n    RESIZE,\n    MOVE,\n    ROTATE\n}\n\nexport class Transformer {\n    transfromType: TRANSFORM_TYPES;\n    transfromStartSize: paper.Rectangle;\n    transformWidth: number;\n    transformLastPoint: paper.Point;\n    transformRotation: number;\n    transformCenter: paper.Point;\n    transformOffsetPoint: paper.Point;\n    isLeftSizeTransform = false;\n\n    constructor(\n        public transfromStartPoint: paper.Point,\n        public path: paper.Raster,\n        public hitResult: paper.HitResult,\n        public isMirrorTransform: boolean\n    ) {\n        if (!hitResult) {\n            this.transfromType = TRANSFORM_TYPES.MOVE;\n        } else if (hitResult.type === 'segment') {\n            this.transfromType = TRANSFORM_TYPES.ROTATE;\n        } else {\n            this.transfromType = TRANSFORM_TYPES.RESIZE;\n        }\n\n        this.transfromStartSize = this.path.bounds.clone();\n        this.transformWidth = this.transfromStartSize.width;\n        this.transformCenter = path.position;\n        this.transformRotation = this.transfromStartPoint.subtract(this.transformCenter).angle;\n        this.transformOffsetPoint = this.transfromStartPoint.subtract(this.transformCenter);\n        this.isLeftSizeTransform = this.transformCenter.x > this.transfromStartPoint.x;\n    }\n\n    updateTransformLastPoint(tPoint: paper.Point) {\n        const point = tPoint.subtract(this.transformOffsetPoint);\n        this.transformLastPoint = point;\n\n        return point;\n    }\n\n    updateTransformRotation(tPoint: paper.Point) {\n        const v1 = tPoint.subtract(this.transformCenter);\n        const rotation = v1.angle - this.transformRotation;\n        this.transformRotation += rotation;\n\n        return rotation;\n    }\n\n    updateTransformWidth(tPoint: paper.Point) {\n        const vector = tPoint.subtract(this.transfromStartPoint);\n        const distance = (vector.x < 0 ? -1 : 1) * tPoint.getDistance(this.transfromStartPoint, false);\n        const transformWidth = this.isLeftSizeTransform\n            ? this.transfromStartSize.width - distance\n            : this.transfromStartSize.width + distance;\n        this.transformWidth = transformWidth;\n\n        return transformWidth;\n    }\n}\n","import { EditorTapToolBase, TapPoint } from './tap.base';\nimport { EditorService, UndoService, CanvasService } from '../services';\nimport { TOOLS } from '../enums/tools';\n\nexport class PipetteTool extends EditorTapToolBase {\n    tool: TOOLS.PIPETTE;\n\n    constructor(\n        protected canvasService: CanvasService,\n        protected editorService: EditorService,\n        protected undoService: UndoService\n    ) {\n        super(editorService);\n    }\n\n    tap({x, y}: TapPoint) {\n        const context = this.canvasService.getFillElement().getContext('2d');\n        const pixel = context.getImageData(x * 2, y * 2, 1, 1);\n        const rgb = pixel.data;\n        this.editorService.setColor(`rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`);\n    }\n}\n","import { EditorService, UndoService, CanvasService } from '../services';\nimport { EditorToolBase } from './tool.base';\nimport * as Hammer from 'hammerjs';\n\nexport interface TapPoint {\n    x: number;\n    y: number;\n}\n\nexport abstract class EditorTapToolBase extends EditorToolBase {\n    protected abstract canvasService: CanvasService;\n    protected abstract editorService: EditorService;\n    protected abstract undoService: UndoService;\n    protected hummerManager: HammerManager;\n\n    addSubscriptions() {\n        super.addSubscriptions();\n\n        const tap = new Hammer.Tap();\n        this.hummerManager = new Hammer.Manager(this.canvasService.getDrawElement());\n        this.hummerManager.add([tap]);\n        this.hummerManager.on('tap', e => {\n            const point = this.canvasService.normalizePoint(e.center);\n            this.tap(point);\n        });\n    }\n\n    clearSubscriptions() {\n        super.clearSubscriptions();\n\n        this.hummerManager.destroy();\n    }\n\n    abstract tap(point: TapPoint);\n}\n","import { Subject } from 'rxjs';\nimport { EditorService } from '../services';\nimport { takeUntil } from 'rxjs/operators';\nimport { TOOLS } from '../enums/tools';\nimport { SMOOTH_TYPES } from '../enums/smooth-types';\n\nexport abstract class EditorToolBase implements EditorTool {\n    protected clear$: Subject<boolean>;\n    protected color: string;\n    protected zonesCount: number;\n    protected isDrawMirrored: boolean;\n    protected strokeWidth: number;\n    protected smoothType: SMOOTH_TYPES;\n    protected abstract tool: TOOLS;\n\n    constructor(\n        protected editorService: EditorService\n    ) {}\n\n    enable() {\n        this.addSubscriptions();\n    }\n\n    disable() {\n        this.clearSubscriptions();\n    }\n\n    addSubscriptions() {\n        this.clear$ = new Subject();\n\n        this.editorService.getColor().pipe(takeUntil(this.clear$))\n            .subscribe(color => this.onChangeColor(color));\n\n        this.editorService.getZonesCount().pipe(takeUntil(this.clear$))\n            .subscribe(zonesCount => this.zonesCount = zonesCount);\n\n        this.editorService.isDrawMirrored().pipe(takeUntil(this.clear$))\n            .subscribe(isDrawMirrored => this.isDrawMirrored = isDrawMirrored);\n\n        this.editorService.getStrokeWidth().pipe(takeUntil(this.clear$))\n            .subscribe(strokeWidth => this.strokeWidth = strokeWidth);\n\n        this.editorService.getSmoothType().pipe(takeUntil(this.clear$))\n            .subscribe(smoothType => this.smoothType = smoothType);\n    }\n\n    clearSubscriptions() {\n        this.clear$.next(true);\n        this.clear$.unsubscribe();\n        this.clear$ = null;\n    }\n\n    getState(points = [], toolParams = {}) {\n        return {\n            tool: {\n                type: this.tool,\n                params: {\n                    ...toolParams\n                }\n            },\n            color: this.color,\n            zonesCount: this.zonesCount,\n            isDrawMirrored: this.isDrawMirrored,\n            strokeWidth: this.strokeWidth,\n            smoothType: this.smoothType,\n            points\n        };\n    }\n\n    onChangeColor(color) {\n        this.color = color;\n    }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nimport 'hammerjs';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","/* (ignored) */"],"sourceRoot":"webpack:///","file":"main-es5.js"}